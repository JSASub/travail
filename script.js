

index.html
178 lignes

html


script.js
2‚ÄØ477 lignes

js


styles.css
440 lignes

css

voici 3 fichiers.
il faudrait rajouter dans la zone palanqu√©e pour chacune des palanqu√©es, une zone de texte pour l'heure de d√©part, une zone de texte pour la profondeur pr√©vue, une zone de texte pour le temps pr√©vu, une zone de texte pour la profondeur r√©alis√©e, une zone de texte pour le temps r√©alis√© et une zone de texte pour les paliers effectu√©s.
et √ßa doit √™tre repris dans la sortie pdf par fichier pour chacune des palanqu√©es.

peux-tu me remettre ces 3 fichiers modifi√©s complets en cons√©quence en ne touchant pas aux commentaires d√©j√† pos√©s ?

Modifier
Je vais modifier vos 3 fichiers pour ajouter les zones de texte demand√©es pour chaque palanqu√©e. Ces informations seront sauvegard√©es dans Firebase et appara√Ætront dans le PDF.


index.html - Version mise √† jour avec champs palanqu√©es
Art√©fact interactif 

script.js - Version mise √† jour avec champs palanqu√©es
Code 



Continuer

Modifier

script.js - Version mise √† jour avec champs palanqu√©es
Code‚ÄÇ‚àô‚ÄÇVersion 2 



Continuer

Modifier

script.js - Version mise √† jour avec champs palanqu√©es
Code‚ÄÇ‚àô‚ÄÇVersion 3 

script.js - Version mise √† jour avec champs palanqu√©es
Code‚ÄÇ‚àô‚ÄÇVersion 4 




Limite d‚Äôutilisation atteinte ‚Äî votre limite sera r√©initialis√©e √† 16:00.



// Firebase configuration (m√©thode classique)
const firebaseConfig = {
  apiKey: "AIzaSyA9FO6BiHkm7dOQ3Z4-wpPQRgnsGKg3pmM",
  authDomain: "palanquees-jsas.firebaseapp.com",
  databaseURL: "https://palanquees-jsas-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "palanquees-jsas",
  storageBucket: "palanquees-jsas.firebasestorage.app",
  messagingSenderId: "284449736616",
  appId: "1:284449736616:web:a0949a9b669def06323f9d"
};

// Initialize Firebase
const app = firebase.initializeApp(firebaseConfig);
const db = firebase.database();

// ===== D√âCLARATIONS GLOBALES =====
let plongeurs = [];
let palanquees = [];
let plongeursOriginaux = []; // Pour le tri
let currentSort = 'none';
let firebaseConnected = false;
let pageLoadTime = Date.now();

// Structure am√©lior√©e pour les palanqu√©es avec les nouvelles donn√©es
let palanqueesData = [];

// DOM helpers
function $(id) {
  return document.getElementById(id);
}

// Fonction helper pour ajouter des event listeners de mani√®re s√©curis√©e
function addSafeEventListener(elementId, event, callback) {
  const element = $(elementId);
  if (element) {
    element.addEventListener(event, callback);
    return true;
  } else {
    console.warn(`‚ö†Ô∏è √âl√©ment '${elementId}' non trouv√© - event listener ignor√©`);
    return false;
  }
}

// Test de connexion Firebase
async function testFirebaseConnection() {
  try {
    const testRef = db.ref('.info/connected');
    testRef.on('value', (snapshot) => {
      firebaseConnected = snapshot.val() === true;
      console.log(firebaseConnected ? "‚úÖ Firebase connect√©" : "‚ùå Firebase d√©connect√©");
    });
    
    // Tentative d'√©criture test
    await db.ref('test').set({ timestamp: Date.now() });
    console.log("‚úÖ Test d'√©criture Firebase r√©ussi");
    return true;
  } catch (error) {
    console.error("‚ùå Test Firebase √©chou√©:", error.message);
    return false;
  }
}

// Chargement des donn√©es depuis Firebase
async function loadFromFirebase() {
  try {
    console.log("üì• Chargement des donn√©es depuis Firebase...");
    
    // Charger les plongeurs
    const plongeursSnapshot = await db.ref('plongeurs').once('value');
    if (plongeursSnapshot.exists()) {
      plongeurs = plongeursSnapshot.val() || [];
      console.log("‚úÖ Plongeurs charg√©s:", plongeurs.length);
    }
    
    // Charger les palanqu√©es avec les nouvelles donn√©es
    const palanqueesSnapshot = await db.ref('palanquees').once('value');
    if (palanqueesSnapshot.exists()) {
      palanquees = palanqueesSnapshot.val() || [];
      console.log("‚úÖ Palanqu√©es charg√©es:", palanquees.length);
    }
    
    // Charger les donn√©es des palanqu√©es (nouveaux champs)
    const palanqueesDataSnapshot = await db.ref('palanqueesData').once('value');
    if (palanqueesDataSnapshot.exists()) {
      palanqueesData = palanqueesDataSnapshot.val() || [];
      console.log("‚úÖ Donn√©es palanqu√©es charg√©es:", palanqueesData.length);
    } else {
      // Initialiser les donn√©es si elles n'existent pas
      palanqueesData = palanquees.map(() => ({
        heureDepart: '',
        profondeurPrevue: '',
        tempsPrevue: '',
        profondeurRealisee: '',
        tempsRealise: '',
        paliers: ''
      }));
    }
    
    plongeursOriginaux = [...plongeurs];
    
    // Rendu initial
    renderPalanquees();
    renderPlongeurs();
    updateAlertes();
    
  } catch (error) {
    console.error("‚ùå Erreur chargement Firebase:", error);
  }
}

// ===== FONCTIONS DE NETTOYAGE =====

// Charger la liste des sessions pour nettoyage - VERSION S√âCURIS√âE
async function populateSessionsCleanupList() {
  const container = $("sessions-cleanup-list");
  if (!container) {
    console.warn("‚ö†Ô∏è Conteneur sessions-cleanup-list non trouv√© - nettoyage sessions d√©sactiv√©");
    return;
  }

  try {
    console.log("üßπ Chargement liste sessions pour nettoyage...");
    const sessions = await loadAvailableSessions();
    
    if (sessions.length === 0) {
      container.innerHTML = '<em style="color: #666;">Aucune session √† nettoyer</em>';
      return;
    }
    
    container.innerHTML = '';
    
    sessions.forEach(session => {
      const item = document.createElement('label');
      item.className = 'cleanup-item';
      
      const plongeeType = session.plongee ? ` (${session.plongee})` : '';
      const dateFormatted = new Date(session.timestamp).toLocaleString('fr-FR');
      
      item.innerHTML = `
        <input type="checkbox" value="${session.key}" class="session-cleanup-checkbox">
        <div class="item-info">
          <span class="item-date">${session.date}${plongeeType}</span>
          <span class="item-details">${session.dp} - ${session.stats.nombrePalanquees} palanqu√©es</span>
          <span class="item-meta">Cr√©√© le ${dateFormatted}</span>
        </div>
      `;
      
      container.appendChild(item);
    });
    
    console.log("‚úÖ Liste sessions nettoyage mise √† jour:", sessions.length, "sessions");
    
  } catch (error) {
    console.error("‚ùå Erreur chargement liste sessions nettoyage:", error);
    if (container) {
      container.innerHTML = '<em style="color: #dc3545;">Erreur de chargement</em>';
    }
  }
}

// Charger la liste des DPs pour nettoyage - VERSION S√âCURIS√âE
async function populateDPCleanupList() {
  const container = $("dp-cleanup-list");
  if (!container) {
    console.warn("‚ö†Ô∏è Conteneur dp-cleanup-list non trouv√© - nettoyage DP d√©sactiv√©");
    return;
  }

  try {
    console.log("üßπ Chargement liste DP pour nettoyage...");
    const snapshot = await db.ref("dpInfo").once('value');
    
    if (!snapshot.exists()) {
      container.innerHTML = '<em style="color: #666;">Aucun DP √† nettoyer</em>';
      return;
    }
    
    const dpInfos = snapshot.val();
    container.innerHTML = '';
    
    // Trier par date d√©croissante
    const dpList = Object.entries(dpInfos).sort((a, b) => 
      new Date(b[1].date) - new Date(a[1].date)
    );
    
    dpList.forEach(([key, dpData]) => {
      const item = document.createElement('label');
      item.className = 'cleanup-item';
      
      const dateFormatted = new Date(dpData.timestamp).toLocaleString('fr-FR');
      const plongeeType = dpData.plongee ? ` (${dpData.plongee})` : '';
      
      item.innerHTML = `
        <input type="checkbox" value="${key}" class="dp-cleanup-checkbox">
        <div class="item-info">
          <span class="item-date">${dpData.date}${plongeeType}</span>
          <span class="item-details">${dpData.nom} - ${dpData.lieu}</span>
          <span class="item-meta">Cr√©√© le ${dateFormatted}</span>
        </div>
      `;
      
      container.appendChild(item);
    });
    
    console.log("‚úÖ Liste DP nettoyage mise √† jour:", dpList.length, "DP");
    
  } catch (error) {
    console.error("‚ùå Erreur chargement liste DP nettoyage:", error);
    if (container) {
      container.innerHTML = '<em style="color: #dc3545;">Erreur de chargement</em>';
    }
  }
}

// Supprimer les sessions s√©lectionn√©es
async function deleteSelectedSessions() {
  const checkboxes = document.querySelectorAll('.session-cleanup-checkbox:checked');
  
  if (checkboxes.length === 0) {
    alert("Aucune session s√©lectionn√©e pour suppression.");
    return;
  }
  
  const sessionKeys = Array.from(checkboxes).map(cb => cb.value);
  const confirmMessage = `√ätes-vous s√ªr de vouloir supprimer ${sessionKeys.length} session(s) ?\n\nCette action est irr√©versible !`;
  
  if (!confirm(confirmMessage)) {
    return;
  }
  
  try {
    console.log("üóëÔ∏è Suppression de", sessionKeys.length, "sessions...");
    
    for (const sessionKey of sessionKeys) {
      await db.ref(`sessions/${sessionKey}`).remove();
      console.log("‚úÖ Session supprim√©e:", sessionKey);
    }
    
    console.log("‚úÖ Suppression sessions termin√©e");
    alert(`${sessionKeys.length} session(s) supprim√©e(s) avec succ√®s !`);
    
    // Actualiser les listes
    await populateSessionsCleanupList();
    await populateSessionSelector();
    
  } catch (error) {
    console.error("‚ùå Erreur suppression sessions:", error);
    alert("Erreur lors de la suppression : " + error.message);
  }
}

// Supprimer les DPs s√©lectionn√©s
async function deleteSelectedDPs() {
  const checkboxes = document.querySelectorAll('.dp-cleanup-checkbox:checked');
  
  if (checkboxes.length === 0) {
    alert("Aucun DP s√©lectionn√© pour suppression.");
    return;
  }
  
  const dpKeys = Array.from(checkboxes).map(cb => cb.value);
  const confirmMessage = `√ätes-vous s√ªr de vouloir supprimer ${dpKeys.length} DP ?\n\nCette action est irr√©versible !`;
  
  if (!confirm(confirmMessage)) {
    return;
  }
  
  try {
    console.log("üóëÔ∏è Suppression de", dpKeys.length, "DP...");
    
    for (const dpKey of dpKeys) {
      await db.ref(`dpInfo/${dpKey}`).remove();
      console.log("‚úÖ DP supprim√©:", dpKey);
    }
    
    console.log("‚úÖ Suppression DP termin√©e");
    alert(`${dpKeys.length} DP supprim√©(s) avec succ√®s !`);
    
    // Actualiser les listes
    await populateDPCleanupList();
    chargerHistoriqueDP();
    
  } catch (error) {
    console.error("‚ùå Erreur suppression DP:", error);
    alert("Erreur lors de la suppression : " + error.message);
  }
}

// Fonctions de s√©lection - VERSION S√âCURIS√âE
function selectAllSessions(select = true) {
  const checkboxes = document.querySelectorAll('.session-cleanup-checkbox');
  if (checkboxes.length === 0) {
    console.warn("‚ö†Ô∏è Aucune checkbox session trouv√©e");
    return;
  }
  checkboxes.forEach(cb => cb.checked = select);
  updateCleanupSelection();
}

function selectAllDPs(select = true) {
  const checkboxes = document.querySelectorAll('.dp-cleanup-checkbox');
  if (checkboxes.length === 0) {
    console.warn("‚ö†Ô∏è Aucune checkbox DP trouv√©e");
    return;
  }
  checkboxes.forEach(cb => cb.checked = select);
  updateCleanupSelection();
}

// Mettre √† jour l'apparence des items s√©lectionn√©s
function updateCleanupSelection() {
  // Sessions
  document.querySelectorAll('.session-cleanup-checkbox').forEach(cb => {
    const item = cb.closest('.cleanup-item');
    if (cb.checked) {
      item.classList.add('selected');
    } else {
      item.classList.remove('selected');
    }
  });
  
  // DPs
  document.querySelectorAll('.dp-cleanup-checkbox').forEach(cb => {
    const item = cb.closest('.cleanup-item');
    if (cb.checked) {
      item.classList.add('selected');
    } else {
      item.classList.remove('selected');
    }
  });
}

// ===== DIAGNOSTIC SYST√àME =====
function diagnosticSystem() {
  console.log("üîç === DIAGNOSTIC SYST√àME ===");
  
  // Test 1: V√©rifier les √©l√©ments HTML
  const compteurPlongeurs = $("compteur-plongeurs");
  const compteurPalanquees = $("compteur-palanquees");
  
  console.log("üîç √âl√©ment compteur-plongeurs:", compteurPlongeurs ? "‚úÖ TROUV√â" : "‚ùå MANQUANT");
  console.log("üîç √âl√©ment compteur-palanquees:", compteurPalanquees ? "‚úÖ TROUV√â" : "‚ùå MANQUANT");
  
  // Test 2: V√©rifier les donn√©es
  console.log("üîç Nombre de plongeurs:", plongeurs.length);
  console.log("üîç Nombre de palanqu√©es:", palanquees.length);
  console.log("üîç D√©tail palanqu√©es:", palanquees.map(p => p.length));
  
  // Test 3: V√©rifier le DOM
  const titreListePlongeurs = document.querySelector("main strong");
  const titrePalanquees = document.querySelector("#palanquees strong");
  
  console.log("üîç Titre liste plongeurs:", titreListePlongeurs ? titreListePlongeurs.innerHTML : "NON TROUV√â");
  console.log("üîç Titre palanqu√©es:", titrePalanquees ? titrePalanquees.innerHTML : "NON TROUV√â");
  
  // Conclusion
  if (!compteurPlongeurs || !compteurPalanquees) {
    console.error("‚ùå PROBL√àME: Les √©l√©ments HTML pour les compteurs n'existent pas !");
    console.error("üîß SOLUTION: Tu dois mettre √† jour ton fichier index.html sur le serveur");
    alert("‚ùå PROBL√àME D√âTECT√â: Les √©l√©ments HTML pour les compteurs sont manquants !\n\nüîß SOLUTION: Mets √† jour ton fichier index.html sur le serveur avec la version qui contient les spans pour les compteurs.");
  } else {
    console.log("‚úÖ √âl√©ments HTML OK, probl√®me ailleurs");
  }
}

// ===== COMPTEURS D'AFFICHAGE =====
function updateCompteurs() {
  // Compteur plongeurs non assign√©s
  const compteurPlongeurs = $("compteur-plongeurs");
  if (compteurPlongeurs) {
    compteurPlongeurs.textContent = `(${plongeurs.length})`;
    compteurPlongeurs.style.color = plongeurs.length === 0 ? "#28a745" : "#007bff";
  }
  
  // Compteur plongeurs dans palanqu√©es
  const totalPlongeursEnPalanquees = palanquees.flat().length;
  const nombrePalanquees = palanquees.length;
  const compteurPalanquees = $("compteur-palanquees");
  
  if (compteurPalanquees) {
    if (nombrePalanquees === 0) {
      compteurPalanquees.textContent = "(Aucune palanqu√©e)";
      compteurPalanquees.style.color = "#666";
    } else {
      const plurielPlongeurs = totalPlongeursEnPalanquees > 1 ? "plongeurs" : "plongeur";
      const plurielPalanquees = nombrePalanquees > 1 ? "palanqu√©es" : "palanqu√©e";
      compteurPalanquees.textContent = `(${totalPlongeursEnPalanquees} ${plurielPlongeurs} dans ${nombrePalanquees} ${plurielPalanquees})`;
      compteurPalanquees.style.color = "#28a745";
    }
  }
  
  console.log(`üìä Compteurs mis √† jour: ${plongeurs.length} non assign√©s, ${totalPlongeursEnPalanquees} en palanqu√©es`);
}

// ===== SYST√àME D'ALERTES AM√âLIOR√â =====
function checkAllAlerts() {
  const alertes = [];
  
  palanquees.forEach((palanquee, idx) => {
    const n1s = palanquee.filter(p => p.niveau === "N1");
    const gps = palanquee.filter(p => ["N4/GP", "N4", "E2", "E3", "E4"].includes(p.niveau));
    const autonomes = palanquee.filter(p => ["N2", "N3"].includes(p.niveau));
    
    // Palanqu√©e > 5 plongeurs
    if (palanquee.length > 5) {
      alertes.push(`Palanqu√©e ${idx + 1}: Plus de 5 plongeurs (${palanquee.length})`);
    }
    
    // Palanqu√©e ‚â§ 1 plongeur
    if (palanquee.length <= 1) {
      alertes.push(`Palanqu√©e ${idx + 1}: Palanqu√©e de ${palanquee.length} plongeur(s)`);
    }
    
    // N1 sans GP
    if (n1s.length > 0 && gps.length === 0) {
      alertes.push(`Palanqu√©e ${idx + 1}: N1 sans Guide de Palanqu√©e`);
    }
    
    // Autonomes > 3
    if (autonomes.length > 3) {
      alertes.push(`Palanqu√©e ${idx + 1}: Plus de 3 plongeurs autonomes (${autonomes.length})`);
    }
    
    // 4 ou 5 plongeurs sans GP
    if ((palanquee.length === 4 || palanquee.length === 5) && gps.length === 0) {
      alertes.push(`Palanqu√©e ${idx + 1}: ${palanquee.length} plongeurs sans Guide de Palanqu√©e`);
    }
  });
  
  return alertes;
}

function updateAlertes() {
  const alertes = checkAllAlerts();
  const alerteSection = $("alertes-section");
  const alerteContent = $("alertes-content");
  
  if (alertes.length === 0) {
    alerteSection.classList.add("alert-hidden");
  } else {
    alerteSection.classList.remove("alert-hidden");
    alerteContent.innerHTML = alertes.map(alerte => 
      `<div class="alert-item">${alerte}</div>`
    ).join('');
  }
}

function checkAlert(palanquee) {
  const n1s = palanquee.filter(p => p.niveau === "N1");
  const gps = palanquee.filter(p => ["N4/GP", "N4", "E2", "E3", "E4"].includes(p.niveau));
  const autonomes = palanquee.filter(p => ["N2", "N3"].includes(p.niveau));
  
  return (
    palanquee.length > 5 ||
    palanquee.length <= 1 ||
    (n1s.length > 0 && gps.length === 0) ||
    autonomes.length > 3 ||
    ((palanquee.length === 4 || palanquee.length === 5) && gps.length === 0)
  );
}

// ===== TRI DES PLONGEURS =====
function sortPlongeurs(type) {
  currentSort = type;
  
  // Mettre √† jour les boutons
  document.querySelectorAll('.sort-btn').forEach(btn => {
    btn.classList.remove('active');
    if (btn.dataset.sort === type) {
      btn.classList.add('active');
    }
  });
  
  switch(type) {
    case 'nom':
      plongeurs.sort((a, b) => a.nom.localeCompare(b.nom));
      break;
    case 'niveau':
      const niveauOrder = { 'N1': 1, 'N2': 2, 'N3': 3, 'N4/GP': 4, 'E1': 5, 'E2': 6, 'E3': 7, 'E4': 8 };
      plongeurs.sort((a, b) => (niveauOrder[a.niveau] || 9) - (niveauOrder[b.niveau] || 9));
      break;
    case 'none':
    default:
      plongeurs = [...plongeursOriginaux];
      break;
  }
  
  renderPlongeurs();
}

// Sauvegarde Firebase avec historique par date/DP
async function syncToDatabase() {
  console.log("üíæ Synchronisation Firebase...");
  
  // Mettre √† jour la liste originale pour le tri
  plongeursOriginaux = [...plongeurs];
  
  // Rendu imm√©diat AVANT la sauvegarde Firebase
  renderPalanquees();
  renderPlongeurs();
  updateAlertes();
  
  // Sauvegarde Firebase en arri√®re-plan
  if (firebaseConnected) {
    try {
      // Sauvegarde globale (pour compatibilit√©)
      await Promise.all([
        db.ref('plongeurs').set(plongeurs),
        db.ref('palanquees').set(palanquees),
        db.ref('palanqueesData').set(palanqueesData)
      ]);
      
      // Sauvegarde par date/DP (NOUVEAU)
      await saveSessionData();
      
      console.log("‚úÖ Sauvegarde Firebase r√©ussie");
    } catch (error) {
      console.error("‚ùå Erreur sync Firebase:", error.message);
    }
  } else {
    console.warn("‚ö†Ô∏è Firebase non connect√©, donn√©es non sauvegard√©es");
  }
}

// NOUVELLE FONCTION : Sauvegarde par session (date + DP + plong√©e)
async function saveSessionData() {
  console.log("üíæ D√âBUT saveSessionData()");
  
  const dpNom = $("dp-nom").value.trim();
  const dpDate = $("dp-date").value;
  const dpPlongee = $("dp-plongee").value;
  
  console.log("üìù Donn√©es r√©cup√©r√©es:", { dpNom, dpDate, dpPlongee });
  
  if (!dpNom || !dpDate || !dpPlongee) {
    console.log("‚ùå Pas de sauvegarde session : DP, date ou plong√©e manquant");
    console.log("üîç D√©tail:", { 
      dpNom: dpNom || "MANQUANT", 
      dpDate: dpDate || "MANQUANT", 
      dpPlongee: dpPlongee || "MANQUANT" 
    });
    return;
  }
  
  // Cr√©er une cl√© unique : date + premi√®re partie du nom DP + type de plong√©e
  const dpKey = dpNom.split(' ')[0].substring(0, 8); // Premier mot, max 8 char
  const sessionKey = `${dpDate}_${dpKey}_${dpPlongee}`;
  
  console.log("üîë Cl√© de session g√©n√©r√©e:", sessionKey);
  
  const sessionData = {
    meta: {
      dp: dpNom,
      date: dpDate,
      lieu: $("dp-lieu").value.trim() || "Non d√©fini",
      plongee: dpPlongee,
      timestamp: Date.now(),
      sessionKey: sessionKey
    },
    plongeurs: plongeurs,
    palanquees: palanquees,
    palanqueesData: palanqueesData, // Ajout des nouvelles donn√©es
    stats: {
      totalPlongeurs: plongeurs.length + palanquees.flat().length,
      nombrePalanquees: palanquees.length,
      plongeursNonAssignes: plongeurs.length,
      alertes: checkAllAlerts()
    }
  };
  
  console.log("üìä Donn√©es de session √† sauvegarder:", sessionData);
  console.log("üéØ Chemin Firebase:", `sessions/${sessionKey}`);
  
  try {
    console.log("üî• Tentative de sauvegarde Firebase...");
    await db.ref(`sessions/${sessionKey}`).set(sessionData);
    console.log("‚úÖ Session sauvegard√©e avec succ√®s:", sessionKey);
    
    // V√©rification imm√©diate
    console.log("üîç V√©rification de la sauvegarde...");
    const verification = await db.ref(`sessions/${sessionKey}`).once('value');
    if (verification.exists()) {
      console.log("‚úÖ V√©rification OK - Session bien sauvegard√©e");
    } else {
      console.error("‚ùå V√©rification √©chou√©e - Session non trouv√©e apr√®s sauvegarde");
    }
    
  } catch (error) {
    console.error("‚ùå Erreur sauvegarde session:", error);
    console.error("üîç D√©tails erreur:", error.message);
  }
}

// NOUVELLE FONCTION : Charger les sessions disponibles - VERSION CORRIG√âE
async function loadAvailableSessions() {
  try {
    const sessionsSnapshot = await db.ref('sessions').once('value');
    if (!sessionsSnapshot.exists()) {
      console.log("‚ÑπÔ∏è Aucune session trouv√©e");
      return [];
    }
    
    const sessions = sessionsSnapshot.val();
    const sessionsList = [];
    
    for (const [key, data] of Object.entries(sessions)) {
      // CORRECTION: V√©rifier si data.meta existe avant de l'utiliser
      if (!data || typeof data !== 'object') {
        console.warn(`‚ö†Ô∏è Session ${key} invalide (donn√©es corrompues), ignor√©e`);
        continue;
      }
      
      // Gestion des anciens formats de sessions
      let sessionInfo;
      
      if (data.meta) {
        // Nouveau format avec meta
        sessionInfo = {
          key: key,
          dp: data.meta.dp || "DP non d√©fini",
          date: data.meta.date || "Date inconnue",
          lieu: data.meta.lieu || "Lieu non d√©fini",
          plongee: data.meta.plongee || "Non d√©fini",
          timestamp: data.meta.timestamp || Date.now(),
          stats: data.stats || {
            nombrePalanquees: data.palanquees ? data.palanquees.length : 0,
            totalPlongeurs: (data.plongeurs || []).length + (data.palanquees || []).flat().length,
            plongeursNonAssignes: (data.plongeurs || []).length
          }
        };
      } else {
        // Ancien format ou format non standard
        console.warn(`‚ö†Ô∏è Session ${key} utilise un ancien format, adaptation...`);
        
        // Essayer d'extraire les infos du nom de la cl√©
        const keyParts = key.split('_');
        const dateFromKey = keyParts[0] || "Date inconnue";
        const plongeeFromKey = keyParts[keyParts.length - 1] || "Non d√©fini";
        
        sessionInfo = {
          key: key,
          dp: data.dp || data.directeurPlongee || "DP non d√©fini (ancien format)",
          date: data.date || dateFromKey,
          lieu: data.lieu || "Lieu non d√©fini",
          plongee: data.plongee || plongeeFromKey,
          timestamp: data.timestamp || Date.now(),
          stats: {
            nombrePalanquees: data.palanquees ? data.palanquees.length : 0,
            totalPlongeurs: (data.plongeurs || []).length + (data.palanquees || []).flat().length,
            plongeursNonAssignes: (data.plongeurs || []).length
          }
        };
      }
      
      sessionsList.push(sessionInfo);
    }
    
    // Trier par date d√©croissante
    sessionsList.sort((a, b) => {
      // Essayer de comparer par date, sinon par timestamp
      const dateA = new Date(a.date);
      const dateB = new Date(b.date);
      
      if (!isNaN(dateA.getTime()) && !isNaN(dateB.getTime())) {
        return dateB - dateA;
      } else {
        // Fallback sur timestamp
        return (b.timestamp || 0) - (a.timestamp || 0);
      }
    });
    
    console.log("‚úÖ Sessions charg√©es:", sessionsList.length);
    return sessionsList;
    
  } catch (error) {
    console.error("‚ùå Erreur chargement sessions:", error);
    return [];
  }
}

// NOUVELLE FONCTION : Charger une session sp√©cifique
async function loadSession(sessionKey) {
  try {
    console.log("üîÑ Chargement de la session:", sessionKey);
    
    const sessionSnapshot = await db.ref(`sessions/${sessionKey}`).once('value');
    if (!sessionSnapshot.exists()) {
      console.error("‚ùå Session non trouv√©e:", sessionKey);
      alert("Session non trouv√©e dans Firebase");
      return false;
    }
    
    const sessionData = sessionSnapshot.val();
    console.log("üìä Donn√©es session r√©cup√©r√©es:", sessionData);
    
    // Charger les donn√©es
    plongeurs = sessionData.plongeurs || [];
    palanquees = sessionData.palanquees || [];
    palanqueesData = sessionData.palanqueesData || palanquees.map(() => ({
      heureDepart: '',
      profondeurPrevue: '',
      tempsPrevue: '',
      profondeurRealisee: '',
      tempsRealise: '',
      paliers: ''
    }));
    plongeursOriginaux = [...plongeurs];
    
    console.log("‚úÖ Donn√©es charg√©es:", plongeurs.length, "plongeurs,", palanquees.length, "palanqu√©es");
    
    // Mettre √† jour les champs DP
    $("dp-nom").value = sessionData.meta.dp || "";
    $("dp-date").value = sessionData.meta.date || "";
    $("dp-lieu").value = sessionData.meta.lieu || "";
    $("dp-plongee").value = sessionData.meta.plongee || "matin";
    
    // FORCER le rendu
    console.log("üé® For√ßage du rendu...");
    renderPalanquees();
    renderPlongeurs();
    updateAlertes();
    
    console.log("‚úÖ Session charg√©e:", sessionKey);
    console.log(`üìä ${plongeurs.length} plongeurs et ${palanquees.length} palanqu√©es affich√©s`);
    
    // Message utilisateur
    const dpMessage = $("dp-message");
    dpMessage.innerHTML = `‚úì Session "${sessionData.meta.dp}" du ${sessionData.meta.date} (${sessionData.meta.plongee || 'matin'}) charg√©e`;
    dpMessage.style.color = "green";
    
    return true;
    
  } catch (error) {
    console.error("‚ùå Erreur chargement session:", error);
    alert("Erreur lors du chargement de la session : " + error.message);
    return false;
  }
}

// NOUVELLE FONCTION : Populer le s√©lecteur de sessions  
async function populateSessionSelector() {
  try {
    console.log("üîÑ Chargement des sessions disponibles...");
    const sessions = await loadAvailableSessions();
    const selector = $("session-selector");
    
    if (!selector) {
      console.error("‚ùå S√©lecteur de sessions non trouv√©");
      return;
    }
    
    // Vider le s√©lecteur
    selector.innerHTML = '<option value="">-- Charger une session --</option>';
    
    if (sessions.length === 0) {
      const option = document.createElement("option");
      option.textContent = "Aucune session disponible";
      option.disabled = true;
      selector.appendChild(option);
      console.log("‚ÑπÔ∏è Aucune session disponible");
      return;
    }
    
    sessions.forEach(session => {
      const option = document.createElement("option");
      option.value = session.key;
      
      // Format d'affichage am√©lior√© avec type de plong√©e
      const plongeeType = session.plongee ? ` (${session.plongee})` : '';
      option.textContent = `${session.date}${plongeeType} - ${session.dp} - ${session.stats.nombrePalanquees} palanqu√©es`;
      
      selector.appendChild(option);
    });
    
    console.log("‚úÖ S√©lecteur de sessions mis √† jour:", sessions.length, "sessions");
  } catch (error) {
    console.error("‚ùå Erreur lors du peuplement du s√©lecteur:", error);
  }
}

// ===== EXPORT JSON AM√âLIOR√â =====
function exportToJSON() {
  const dpNom = $("dp-nom").value || "Non d√©fini";
  const dpDate = $("dp-date").value || "Non d√©finie";
  const dpLieu = $("dp-lieu").value || "Non d√©fini";
  const dpPlongee = $("dp-plongee").value || "matin";
  
  const exportData = {
    meta: {
      dp: dpNom,
      date: dpDate,
      lieu: dpLieu,
      plongee: dpPlongee,
      version: "2.0.0",
      exportDate: new Date().toISOString()
    },
    plongeurs: plongeurs.map(p => ({
      nom: p.nom,
      niveau: p.niveau,
      prerogatives: p.pre || ""
    })),
    palanquees: palanquees.map((pal, idx) => ({
      numero: idx + 1,
      plongeurs: pal.map(p => ({
        nom: p.nom,
        niveau: p.niveau,
        prerogatives: p.pre || ""
      })),
      donnees: palanqueesData[idx] || {},
      alertes: checkAlert(pal) ? checkAllAlerts().filter(a => a.includes(`Palanqu√©e ${idx + 1}`)) : []
    })),
    resume: {
      totalPlongeurs: plongeurs.length + palanquees.flat().length,
      nombrePalanquees: palanquees.length,
      plongeursNonAssignes: plongeurs.length,
      alertesTotal: checkAllAlerts().length
    }
  };
  
  const dataStr = JSON.stringify(exportData, null, 2);
  const blob = new Blob([dataStr], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `palanquees-${dpDate || 'export'}-${dpPlongee}.json`;
  a.click();
  URL.revokeObjectURL(url);
  
  console.log("üì§ Export JSON am√©lior√© effectu√©");
}

// Render functions
function renderPlongeurs() {
  const liste = $("listePlongeurs");
  if (!liste) return;
  
  liste.innerHTML = "";
  
  if (plongeurs.length === 0) {
    liste.innerHTML = '<li style="text-align: center; color: #666; font-style: italic; padding: 20px;">Aucun plongeur ajout√©</li>';
  } else {
    plongeurs.forEach((p, i) => {
      const li = document.createElement("li");
      li.className = "plongeur-item";
      li.draggable = true;
      li.dataset.index = i;
      
      li.innerHTML = `
        <div class="plongeur-content">
          <span class="plongeur-nom">${p.nom}</span>
          <span class="plongeur-niveau">${p.niveau}</span>
          <span class="plongeur-prerogatives">[${p.pre || 'Aucune'}]</span>
          <span class="delete-plongeur" title="Supprimer ce plongeur">‚ùå</span>
        </div>
      `;
      
      // Event listeners pour drag & drop - VERSION CORRIG√âE FIREBASE
      li.addEventListener("dragstart", e => {
        console.log("üñ±Ô∏è D√©but drag plongeur:", p.nom, "index:", i);
        li.classList.add('dragging');
        
        // IMPORTANT: Stocker les donn√©es du plongeur directement, pas l'index
        const plongeurData = {
          type: "fromMainList",
          plongeur: { ...p }, // Clone de l'objet
          originalIndex: i
        };
        
        e.dataTransfer.setData("text/plain", JSON.stringify(plongeurData));
        e.dataTransfer.effectAllowed = "move";
      });
      
      li.addEventListener("dragend", e => {
        li.classList.remove('dragging');
        console.log("üñ±Ô∏è Fin drag plongeur");
      });
      
      li.querySelector(".delete-plongeur").addEventListener("click", (e) => {
        e.stopPropagation();
        if (confirm(`Supprimer ${p.nom} de la liste ?`)) {
          plongeurs.splice(i, 1);
          // Mettre √† jour la liste originale
          plongeursOriginaux = plongeursOriginaux.filter(po => po.nom !== p.nom);
          syncToDatabase();
        }
      });
      
      liste.appendChild(li);
    });
  }
  
  // Mise √† jour des compteurs apr√®s rendu
  updateCompteurs();
}

function renderPalanquees() {
  const container = $("palanqueesContainer");
  if (!container) return;
  
  container.innerHTML = "";
  
  if (palanquees.length === 0) return;
  
  // S'assurer que palanqueesData a la bonne taille
  while (palanqueesData.length < palanquees.length) {
    palanqueesData.push({
      heureDepart: '',
      profondeurPrevue: '',
      tempsPrevue: '',
      profondeurRealisee: '',
      tempsRealise: '',
      paliers: ''
    });
  }
  
  palanquees.forEach((palanquee, idx) => {
    const div = document.createElement("div");
    div.className = "palanquee";
    div.dataset.index = idx;
    div.dataset.alert = checkAlert(palanquee) ? "true" : "false";
    
    // R√©cup√©rer les donn√©es de la palanqu√©e
    const palData = palanqueesData[idx] || {
      heureDepart: '',
      profondeurPrevue: '',
      tempsPrevue: '',
      profondeurRealisee: '',
      tempsRealise: '',
      paliers: ''
    };
    
    div.innerHTML = `
      <div class="palanquee-title">
        <span>Palanqu√©e ${idx + 1} (${palanquee.length} plongeur${palanquee.length > 1 ? 's' : ''})</span>
        <span class="remove-palanquee" style="color: red; cursor: pointer;">‚ùå</span>
      </div>
      
      <div class="palanquee-info-section">
        <div class="palanquee-info-grid">
          <div class="info-item">
            <label>Heure d√©part:</label>
            <input type="time" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="heureDepart" 
                   value="${palData.heureDepart || ''}" 
                   placeholder="HH:MM">
          </div>
          <div class="info-item">
            <label>Prof. pr√©vue:</label>
            <input type="text" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="profondeurPrevue" 
                   value="${palData.profondeurPrevue || ''}" 
                   placeholder="20m">
          </div>
          <div class="info-item">
            <label>Temps pr√©vu:</label>
            <input type="text" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="tempsPrevue" 
                   value="${palData.tempsPrevue || ''}" 
                   placeholder="45min">
          </div>
          <div class="info-item">
            <label>Prof. r√©alis√©e:</label>
            <input type="text" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="profondeurRealisee" 
                   value="${palData.profondeurRealisee || ''}" 
                   placeholder="18m">
          </div>
          <div class="info-item">
            <label>Temps r√©alis√©:</label>
            <input type="text" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="tempsRealise" 
                   value="${palData.tempsRealise || ''}" 
                   placeholder="40min">
          </div>
          <div class="info-item">
            <label>Paliers:</label>
            <input type="text" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="paliers" 
                   value="${palData.paliers || ''}" 
                   placeholder="3min √† 3m">
          </div>
        </div>
      </div>
    `;
    
    if (palanquee.length === 0) {
      const emptyMsg = document.createElement("div");
      emptyMsg.className = "palanquee-empty";
      emptyMsg.textContent = "Glissez des plongeurs ici ‚¨áÔ∏è";
      div.appendChild(emptyMsg);
    } else {
      const plongeursList = document.createElement("ul");
      plongeursList.className = "palanquee-plongeurs-list";
      
      palanquee.forEach((plg, plongeurIndex) => {
        const li = document.createElement("li");
        li.className = "plongeur-item palanquee-plongeur-item";
        li.draggable = true;
        
        li.innerHTML = `
          <div class="plongeur-content">
            <span class="plongeur-nom">${plg.nom}</span>
            <span class="plongeur-niveau">${plg.niveau}</span>
            <input type="text" class="plongeur-prerogatives-editable" 
                   value="${plg.pre || ''}" 
                   placeholder="PE20, PA40..."
                   data-palanquee-idx="${idx}"
                   data-plongeur-idx="${plongeurIndex}"
                   title="Cliquez pour modifier les pr√©rogatives">
            <span class="return-plongeur" 
                  data-palanquee-idx="${idx}"
                  data-plongeur-idx="${plongeurIndex}"
                  title="Remettre dans la liste">‚¨ÖÔ∏è</span>
          </div>
        `;
        
        // Event listener pour drag & drop - VERSION CORRIG√âE
        li.addEventListener("dragstart", e => {
          console.log("üñ±Ô∏è D√©but drag depuis palanqu√©e", idx + 1, "plongeur", plongeurIndex, ":", plg.nom);
          li.classList.add('dragging');
          e.dataTransfer.setData("text/plain", JSON.stringify({
            type: "fromPalanquee",
            palanqueeIndex: idx,
            plongeurIndex: plongeurIndex,
            plongeur: plg
          }));
          e.dataTransfer.effectAllowed = "move";
        });
        
        li.addEventListener("dragend", e => {
          li.classList.remove('dragging');
          console.log("üñ±Ô∏è Fin drag depuis palanqu√©e");
        });
        
        plongeursList.appendChild(li);
      });
      
      div.appendChild(plongeursList);
    }

    // Event listeners
    div.querySelector(".remove-palanquee").addEventListener("click", () => {
      if (confirm(`Supprimer la palanqu√©e ${idx + 1} ?`)) {
        palanquee.forEach(plg => {
          plongeurs.push(plg);
          plongeursOriginaux.push(plg);
        });
        palanquees.splice(idx, 1);
        palanqueesData.splice(idx, 1);
        syncToDatabase();
      }
    });

    div.addEventListener("drop", e => {
      e.preventDefault();
      div.classList.remove('drag-over');
      
      const data = e.dataTransfer.getData("text/plain");
      console.log("üéØ Drop dans palanqu√©e", idx + 1, "data re√ßue:", data);
      
      try {
        const dragData = JSON.parse(data);
        console.log("üìù Donn√©es pars√©es:", dragData);
        
        if (dragData.type === "fromPalanquee") {
          console.log("üîÑ D√©placement entre palanqu√©es d√©tect√©");
          if (dragData.palanqueeIndex !== undefined && 
              dragData.plongeurIndex !== undefined && 
              palanquees[dragData.palanqueeIndex] &&
              palanquees[dragData.palanqueeIndex][dragData.plongeurIndex]) {
            
            const sourcePalanquee = palanquees[dragData.palanqueeIndex];
            const plongeur = sourcePalanquee.splice(dragData.plongeurIndex, 1)[0];
            palanquee.push(plongeur);
            console.log("‚úÖ Plongeur d√©plac√© entre palanqu√©es:", plongeur.nom);
            syncToDatabase();
          }
          return;
        }
        
        if (dragData.type === "fromMainList") {
          console.log("üìù D√©placement depuis liste principale d√©tect√©");
          // Utiliser les donn√©es du plongeur directement
          const plongeurToMove = dragData.plongeur;
          
          // Trouver et supprimer le plongeur de la liste principale
          const indexToRemove = plongeurs.findIndex(p => 
            p.nom === plongeurToMove.nom && p.niveau === plongeurToMove.niveau
          );
          
          if (indexToRemove !== -1) {
            plongeurs.splice(indexToRemove, 1);
            palanquee.push(plongeurToMove);
            console.log("‚úÖ Plongeur ajout√© depuis liste principale:", plongeurToMove.nom);
            syncToDatabase();
          } else {
            console.error("‚ùå Plongeur non trouv√© dans la liste principale");
          }
          return;
        }
        
      } catch (error) {
        console.error("‚ùå Erreur parsing donn√©es drag:", error);
      }
    });

    // Drag & drop am√©lior√©
    div.addEventListener("dragover", e => {
      e.preventDefault();
      e.dataTransfer.dropEffect = "move";
      div.classList.add('drag-over');
      console.log("üéØ Survol palanqu√©e", idx + 1);
    });
    
    div.addEventListener("dragleave", e => {
      if (!div.contains(e.relatedTarget)) {
        div.classList.remove('drag-over');
        console.log("üéØ Sortie palanqu√©e", idx + 1);
      }
    });

    container.appendChild(div);
  });
  
  setupPalanqueesEventListeners();
  
  // Mise √† jour des compteurs apr√®s rendu des palanqu√©es
  updateCompteurs();
}

function setupPalanqueesEventListeners() {
  // Event delegation pour les boutons de retour
  document.addEventListener("click", (e) => {
    if (e.target.classList.contains("return-plongeur")) {
      const palanqueeIdx = parseInt(e.target.dataset.palanqueeIdx);
      const plongeurIdx = parseInt(e.target.dataset.plongeurIdx);
      
      if (palanquees[palanqueeIdx] && palanquees[palanqueeIdx][plongeurIdx]) {
        const plongeur = palanquees[palanqueeIdx].splice(plongeurIdx, 1)[0];
        plongeurs.push(plongeur);
        plongeursOriginaux.push(plongeur);
        syncToDatabase();
      }
    }
  });
  
  // Event delegation pour la modification des pr√©rogatives
  document.addEventListener("change", (e) => {
    if (e.target.classList.contains("plongeur-prerogatives-editable")) {
      const palanqueeIdx = parseInt(e.target.dataset.palanqueeIdx);
      const plongeurIdx = parseInt(e.target.dataset.plongeurIdx);
      const newPrerogatives = e.target.value.trim();
      
      if (palanquees[palanqueeIdx] && palanquees[palanqueeIdx][plongeurIdx]) {
        palanquees[palanqueeIdx][plongeurIdx].pre = newPrerogatives;
        syncToDatabase();
      }
    }
    
    // G√©rer les changements dans les champs d'info palanqu√©e
    if (e.target.classList.contains("palanquee-info-input")) {
      const palanqueeIdx = parseInt(e.target.dataset.palanquee);
      const field = e.target.dataset.field;
      const value = e.target.value.trim();
      
      if (!palanqueesData[palanqueeIdx]) {
        palanqueesData[palanqueeIdx] = {
          heureDepart: '',
          profondeurPrevue: '',
          tempsPrevue: '',
          profondeurRealisee: '',
          tempsRealise: '',
          paliers: ''
        };
      }
      
      palanqueesData[palanqueeIdx][field] = value;
      syncToDatabase();
      console.log(`‚úÖ Mise √† jour palanqu√©e ${palanqueeIdx + 1} - ${field}: ${value}`);
    }
  });
  
  // Emp√™cher le drag & drop sur les champs input
  document.addEventListener("mousedown", (e) => {
    if (e.target.classList.contains("plongeur-prerogatives-editable") || 
        e.target.classList.contains("palanquee-info-input")) {
      e.stopPropagation();
    }
  });
}


index.html
178 lignes

html


script.js
2‚ÄØ477 lignes

js


styles.css
440 lignes

css

voici 3 fichiers.
il faudrait rajouter dans la zone palanqu√©e pour chacune des palanqu√©es, une zone de texte pour l'heure de d√©part, une zone de texte pour la profondeur pr√©vue, une zone de texte pour le temps pr√©vu, une zone de texte pour la profondeur r√©alis√©e, une zone de texte pour le temps r√©alis√© et une zone de texte pour les paliers effectu√©s.
et √ßa doit √™tre repris dans la sortie pdf par fichier pour chacune des palanqu√©es.

peux-tu me remettre ces 3 fichiers modifi√©s complets en cons√©quence en ne touchant pas aux commentaires d√©j√† pos√©s ?

Modifier
Je vais modifier vos 3 fichiers pour ajouter les zones de texte demand√©es pour chaque palanqu√©e. Ces informations seront sauvegard√©es dans Firebase et appara√Ætront dans le PDF.


index.html - Version mise √† jour avec champs palanqu√©es
Art√©fact interactif 

script.js - Version mise √† jour avec champs palanqu√©es
Code 



Continuer

Modifier

script.js - Version mise √† jour avec champs palanqu√©es
Code‚ÄÇ‚àô‚ÄÇVersion 2 



Continuer

Modifier

script.js - Version mise √† jour avec champs palanqu√©es
Code‚ÄÇ‚àô‚ÄÇVersion 3 

script.js - Version mise √† jour avec champs palanqu√©es
Code‚ÄÇ‚àô‚ÄÇVersion 4 




Limite d‚Äôutilisation atteinte ‚Äî votre limite sera r√©initialis√©e √† 16:00.



// ===== FONCTIONS PDF =====
function generatePDFPreview() {
  console.log("üé® G√©n√©ration de l'aper√ßu PDF professionnel...");
  
  try {
    const dpNom = $("dp-nom").value || "Non d√©fini";
    const dpDate = $("dp-date").value || "Non d√©finie";
    const dpLieu = $("dp-lieu").value || "Non d√©fini";
    const dpPlongee = $("dp-plongee").value || "matin";
    
    // Calculs statistiques
    const totalPlongeurs = plongeurs.length + palanquees.reduce(function(total, pal) { return total + pal.length; }, 0);
    const plongeursEnPalanquees = palanquees.reduce(function(total, pal) { return total + pal.length; }, 0);
    const alertesTotal = checkAllAlerts();
    
    // Fonction pour formater la date
    function formatDateFrench(dateString) {
      if (!dateString) return "Non d√©finie";
      const date = new Date(dateString);
      return date.toLocaleDateString('fr-FR');
    }
    
    // Fonction pour capitaliser
    function capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
    }

    // CSS pour le document
    const cssStyles = `
      <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
          font-family: 'Segoe UI', Arial, sans-serif;
          line-height: 1.6;
          color: #333;
          background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
          min-height: 100vh;
        }
        .container {
          max-width: 210mm;
          margin: 0 auto;
          background: white;
          box-shadow: 0 10px 30px rgba(0,0,0,0.1);
          min-height: 297mm;
        }
        .header {
          background: linear-gradient(135deg, #004080 0%, #007bff 100%);
          color: white;
          padding: 30px;
          position: relative;
        }
        .header-content { position: relative; z-index: 2; }
        .logo-title {
          display: flex;
          align-items: center;
          gap: 15px;
          margin-bottom: 20px;
        }
        .logo {
          width: 60px;
          height: 60px;
          background: rgba(255,255,255,0.2);
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 24px;
          font-weight: bold;
        }
        .main-title {
          font-size: 28px;
          font-weight: 300;
          letter-spacing: 2px;
        }
        .subtitle {
          font-size: 16px;
          opacity: 0.9;
          font-weight: 300;
        }
        .meta-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 20px;
          margin-top: 25px;
        }
        .meta-item {
          background: rgba(255,255,255,0.1);
          padding: 15px;
          border-radius: 8px;
        }
        .meta-label {
          font-size: 12px;
          opacity: 0.8;
          text-transform: uppercase;
          letter-spacing: 1px;
          margin-bottom: 5px;
        }
        .meta-value {
          font-size: 16px;
          font-weight: 500;
        }
        .content { padding: 40px; }
        .section { margin-bottom: 40px; }
        .section-title {
          font-size: 20px;
          color: #004080;
          margin-bottom: 20px;
          padding-bottom: 10px;
          border-bottom: 3px solid #007bff;
          position: relative;
        }
        .section-title::after {
          content: '';
          position: absolute;
          bottom: -3px;
          left: 0;
          width: 60px;
          height: 3px;
          background: #28a745;
        }
        .stats-dashboard {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 20px;
          margin-bottom: 30px;
        }
        .stat-card {
          background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
          border-radius: 12px;
          padding: 25px;
          text-align: center;
          border-left: 5px solid #007bff;
          transition: transform 0.3s ease;
        }
        .stat-card:hover { transform: translateY(-5px); }
        .stat-number {
          font-size: 36px;
          font-weight: bold;
          color: #004080;
          margin-bottom: 5px;
        }
        .stat-label {
          font-size: 14px;
          color: #6c757d;
          text-transform: uppercase;
          letter-spacing: 1px;
        }
        .stat-detail {
          font-size: 12px;
          color: #28a745;
          margin-top: 5px;
          font-weight: 500;
        }
        .alerts-section {
          background: linear-gradient(135deg, #fff5f5 0%, #fed7d7 100%);
          border-radius: 12px;
          padding: 25px;
          margin: 30px 0;
          border-left: 5px solid #dc3545;
        }
        .alerts-title {
          display: flex;
          align-items: center;
          gap: 10px;
          font-size: 18px;
          color: #dc3545;
          margin-bottom: 15px;
          font-weight: 600;
        }
        .alert-item {
          background: white;
          border-radius: 8px;
          padding: 15px;
          margin: 10px 0;
          border-left: 4px solid #dc3545;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .palanquees-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
          gap: 25px;
        }
        .palanquee-card {
          background: white;
          border-radius: 15px;
          overflow: hidden;
          box-shadow: 0 8px 25px rgba(0,0,0,0.1);
          border: 2px solid #e9ecef;
          transition: all 0.3s ease;
        }
        .palanquee-card.has-alert {
          border-color: #dc3545;
          box-shadow: 0 8px 25px rgba(220, 53, 69, 0.2);
        }
        .palanquee-header {
          background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
          color: white;
          padding: 20px;
        }
        .palanquee-card.has-alert .palanquee-header {
          background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        }
        .palanquee-number {
          font-size: 24px;
          font-weight: bold;
          margin-bottom: 5px;
        }
        .palanquee-stats {
          font-size: 14px;
          opacity: 0.9;
        }
        .palanquee-info-box {
          background: #f8f9fa;
          padding: 15px;
          margin: 15px;
          border-radius: 8px;
          border-left: 4px solid #17a2b8;
        }
        .palanquee-info-grid {
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          gap: 10px;
          font-size: 13px;
        }
        .info-row {
          display: flex;
          justify-content: space-between;
        }
        .info-label {
          font-weight: bold;
          color: #495057;
        }
        .info-value {
          color: #212529;
        }
        .palanquee-body { padding: 25px; }
        .plongeur-card {
          background: #f8f9fa;
          border-radius: 10px;
          padding: 15px;
          margin: 10px 0;
          border-left: 4px solid #28a745;
          display: flex;
          align-items: center;
          gap: 15px;
          transition: all 0.3s ease;
        }
        .plongeur-card:hover {
          background: #e9ecef;
          transform: translateX(5px);
        }
        .plongeur-avatar {
          width: 40px;
          height: 40px;
          background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          font-weight: bold;
          font-size: 16px;
        }
        .plongeur-info { flex: 1; }
        .plongeur-nom {
          font-weight: 600;
          color: #004080;
          margin-bottom: 2px;
        }
        .plongeur-details {
          font-size: 12px;
          color: #6c757d;
        }
        .niveau-badge {
          color: white;
          padding: 5px 12px;
          border-radius: 20px;
          font-size: 12px;
          font-weight: bold;
          text-transform: uppercase;
          letter-spacing: 1px;
        }
        .unassigned-section {
          background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
          border-radius: 12px;
          padding: 25px;
          border-left: 5px solid #ffc107;
        }
        .unassigned-title {
          color: #856404;
          font-size: 18px;
          margin-bottom: 20px;
          font-weight: 600;
        }
        .footer {
          background: #343a40;
          color: white;
          padding: 30px;
          text-align: center;
          margin-top: 50px;
        }
        .footer-content {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 20px;
          margin-bottom: 20px;
        }
        .footer-section h4 {
          color: #007bff;
          margin-bottom: 10px;
        }
        .footer-bottom {
          border-top: 1px solid #495057;
          padding-top: 20px;
          font-size: 12px;
          opacity: 0.8;
        }
        @media print {
          body { background: white !important; }
          .container { box-shadow: none !important; max-width: none !important; }
          .palanquees-grid { grid-template-columns: 1fr 1fr; }
          .stats-dashboard { grid-template-columns: repeat(4, 1fr); }
          .palanquee-card { break-inside: avoid; margin-bottom: 20px; }
        }
        @media (max-width: 768px) {
          .container { margin: 0; box-shadow: none; }
          .header { padding: 20px; }
          .content { padding: 20px; }
          .palanquees-grid { grid-template-columns: 1fr; }
          .stats-dashboard { grid-template-columns: repeat(2, 1fr); }
        }
      </style>
    `;

    // Construction du HTML par parties
    let htmlContent = '';
    
    // En-t√™te du document
    htmlContent += '<!DOCTYPE html>';
    htmlContent += '<html lang="fr">';
    htmlContent += '<head>';
    htmlContent += '<meta charset="UTF-8">';
    htmlContent += '<meta name="viewport" content="width=device-width, initial-scale=1.0">';
    htmlContent += '<title>Palanqu√©es JSAS - ' + formatDateFrench(dpDate) + ' (' + capitalize(dpPlongee) + ')</title>';
    htmlContent += cssStyles;
    htmlContent += '</head>';
    htmlContent += '<body>';
    
    // Container principal
    htmlContent += '<div class="container">';
    
    // En-t√™te
    htmlContent += '<header class="header">';
    htmlContent += '<div class="header-content">';
    htmlContent += '<div class="logo-title">';
    htmlContent += '<div class="logo">ü§ø</div>';
    htmlContent += '<div>';
    htmlContent += '<h1 class="main-title">PALANQU√âES JSAS</h1>';
    htmlContent += '<p class="subtitle">Organisation Associative de Plong√©e</p>';
    htmlContent += '</div>';
    htmlContent += '</div>';
    
    htmlContent += '<div class="meta-grid">';
    htmlContent += '<div class="meta-item">';
    htmlContent += '<div class="meta-label">Directeur de Plong√©e</div>';
    htmlContent += '<div class="meta-value">' + dpNom + '</div>';
    htmlContent += '</div>';
    htmlContent += '<div class="meta-item">';
    htmlContent += '<div class="meta-label">Date de Plong√©e</div>';
    htmlContent += '<div class="meta-value">' + formatDateFrench(dpDate) + '</div>';
    htmlContent += '</div>';
    htmlContent += '<div class="meta-item">';
    htmlContent += '<div class="meta-label">Lieu</div>';
    htmlContent += '<div class="meta-value">' + dpLieu + '</div>';
    htmlContent += '</div>';
    htmlContent += '<div class="meta-item">';
    htmlContent += '<div class="meta-label">Session</div>';
    htmlContent += '<div class="meta-value">' + capitalize(dpPlongee) + '</div>';
    htmlContent += '</div>';
    htmlContent += '</div>';
    
    htmlContent += '</div>';
    htmlContent += '</header>';
    
    // Contenu principal
    htmlContent += '<main class="content">';
    
    // Section statistiques
    htmlContent += '<section class="section">';
    htmlContent += '<h2 class="section-title">üìä Tableau de Bord</h2>';
    htmlContent += '<div class="stats-dashboard">';
    
    htmlContent += '<div class="stat-card">';
    htmlContent += '<div class="stat-number">' + totalPlongeurs + '</div>';
    htmlContent += '<div class="stat-label">Total Plongeurs</div>';
    htmlContent += '<div class="stat-detail">Tous niveaux confondus</div>';
    htmlContent += '</div>';
    
    htmlContent += '<div class="stat-card">';
    htmlContent += '<div class="stat-number">' + palanquees.length + '</div>';
    htmlContent += '<div class="stat-label">Palanqu√©es</div>';
    htmlContent += '<div class="stat-detail">Taille moyenne: ' + (palanquees.length > 0 ? (plongeursEnPalanquees / palanquees.length).toFixed(1) : 0) + '</div>';
    htmlContent += '</div>';
    
    htmlContent += '<div class="stat-card">';
    htmlContent += '<div class="stat-number">' + plongeursEnPalanquees + '</div>';
    htmlContent += '<div class="stat-label">Assign√©s</div>';
    htmlContent += '<div class="stat-detail">' + (totalPlongeurs > 0 ? ((plongeursEnPalanquees/totalPlongeurs)*100).toFixed(1) : 0) + '% du total</div>';
    htmlContent += '</div>';
    
    htmlContent += '<div class="stat-card">';
    htmlContent += '<div class="stat-number">' + alertesTotal.length + '</div>';
    htmlContent += '<div class="stat-label">Alertes</div>';
    htmlContent += '<div class="stat-detail">' + (alertesTotal.length === 0 ? 'Tout est OK ‚úÖ' : 'Attention requise ‚ö†Ô∏è') + '</div>';
    htmlContent += '</div>';
    
    htmlContent += '</div>';
    htmlContent += '</section>';
    
    // Section alertes
    if (alertesTotal.length > 0) {
      htmlContent += '<section class="section">';
      htmlContent += '<div class="alerts-section">';
      htmlContent += '<h3 class="alerts-title">';
      htmlContent += '<span>‚ö†Ô∏è</span>';
      htmlContent += '<span>Alertes de S√©curit√© (' + alertesTotal.length + ')</span>';
      htmlContent += '</h3>';
      
      for (let i = 0; i < alertesTotal.length; i++) {
        htmlContent += '<div class="alert-item">' + alertesTotal[i] + '</div>';
      }
      
      htmlContent += '</div>';
      htmlContent += '</section>';
    }
    
    // Section palanqu√©es
    htmlContent += '<section class="section">';
    htmlContent += '<h2 class="section-title">üèä‚Äç‚ôÇÔ∏è Organisation des Palanqu√©es</h2>';
    
    if (palanquees.length === 0) {
      htmlContent += '<div class="unassigned-section">';
      htmlContent += '<div class="unassigned-title">Aucune palanqu√©e cr√©√©e</div>';
      htmlContent += '<p>Tous les plongeurs sont encore en attente d\'assignation.</p>';
      htmlContent += '</div>';
    } else {
      htmlContent += '<div class="palanquees-grid">';
      
      for (let i = 0; i < palanquees.length; i++) {
        const pal = palanquees[i];
        const palData = palanqueesData[i] || {};
        const isAlert = checkAlert(pal);
        const gps = pal.filter(function(p) { return ["N4/GP", "N4", "E2", "E3", "E4"].includes(p.niveau); });
        const n1s = pal.filter(function(p) { return p.niveau === "N1"; });
        const autonomes = pal.filter(function(p) { return ["N2", "N3"].includes(p.niveau); });
        
        htmlContent += '<div class="palanquee-card' + (isAlert ? ' has-alert' : '') + '">';
        htmlContent += '<div class="palanquee-header">';
        htmlContent += '<div class="palanquee-number">Palanqu√©e ' + (i + 1) + '</div>';
        htmlContent += '<div class="palanquee-stats">';
        htmlContent += pal.length + ' plongeur' + (pal.length > 1 ? 's' : '') + ' ‚Ä¢ ';
        htmlContent += gps.length + ' GP ‚Ä¢ ' + n1s.length + ' N1 ‚Ä¢ ' + autonomes.length + ' Autonomes';
        htmlContent += '</div>';
        htmlContent += '</div>';
        
        // Nouvelle section informations de plong√©e
        if (palData.heureDepart || palData.profondeurPrevue || palData.tempsPrevue || 
            palData.profondeurRealisee || palData.tempsRealise || palData.paliers) {
          htmlContent += '<div class="palanquee-info-box">';
          htmlContent += '<div class="palanquee-info-grid">';
          
          if (palData.heureDepart || palData.profondeurPrevue || palData.tempsPrevue) {
            htmlContent += '<div>';
            htmlContent += '<strong style="color: #007bff;">Planifi√©:</strong><br>';
            if (palData.heureDepart) htmlContent += '<div class="info-row"><span class="info-label">D√©part:</span> <span class="info-value">' + palData.heureDepart + '</span></div>';
            if (palData.profondeurPrevue) htmlContent += '<div class="info-row"><span class="info-label">Profondeur:</span> <span class="info-value">' + palData.profondeurPrevue + '</span></div>';
            if (palData.tempsPrevue) htmlContent += '<div class="info-row"><span class="info-label">Temps:</span> <span class="info-value">' + palData.tempsPrevue + '</span></div>';
            htmlContent += '</div>';
          }
          
          if (palData.profondeurRealisee || palData.tempsRealise || palData.paliers) {
            htmlContent += '<div>';
            htmlContent += '<strong style="color: #28a745;">R√©alis√©:</strong><br>';
            if (palData.profondeurRealisee) htmlContent += '<div class="info-row"><span class="info-label">Profondeur:</span> <span class="info-value">' + palData.profondeurRealisee + '</span></div>';
            if (palData.tempsRealise) htmlContent += '<div class="info-row"><span class="info-label">Temps:</span> <span class="info-value">' + palData.tempsRealise + '</span></div>';
            if (palData.paliers) htmlContent += '<div class="info-row"><span class="info-label">Paliers:</span> <span class="info-value">' + palData.paliers + '</span></div>';
            htmlContent += '</div>';
          }
          
          htmlContent += '</div>';
          htmlContent += '</div>';
        }
        
        htmlContent += '<div class="palanquee-body">';
        
        if (pal.length === 0) {
          htmlContent += '<p style="text-align: center; color: #6c757d; font-style: italic;">Aucun plongeur assign√©</p>';
        } else {
          for (let j = 0; j < pal.length; j++) {
            const p = pal[j];
            const initiales = p.nom.split(' ').map(function(n) { return n.charAt(0); }).join('').substring(0, 2).toUpperCase();
            
            let niveauColor = '#6c757d';
            if (p.niveau === 'N1') niveauColor = '#17a2b8';
            else if (p.niveau === 'N2') niveauColor = '#28a745';
            else if (p.niveau === 'N3') niveauColor = '#ffc107';
            else if (p.niveau === 'N4/GP') niveauColor = '#fd7e14';
            else if (p.niveau === 'E1') niveauColor = '#6f42c1';
            else if (p.niveau === 'E2') niveauColor = '#e83e8c';
            else if (p.niveau === 'E3') niveauColor = '#dc3545';
            else if (p.niveau === 'E4') niveauColor = '#343a40';
            
            htmlContent += '<div class="plongeur-card">';
            htmlContent += '<div class="plongeur-avatar">' + initiales + '</div>';
            htmlContent += '<div class="plongeur-info">';
            htmlContent += '<div class="plongeur-nom">' + p.nom + '</div>';
            htmlContent += '<div class="plongeur-details">' + (p.pre || 'Aucune pr√©rogative sp√©cifi√©e') + '</div>';
            htmlContent += '</div>';
            htmlContent += '<div class="niveau-badge" style="background: ' + niveauColor + '">' + p.niveau + '</div>';
            htmlContent += '</div>';
          }
        }
        
        htmlContent += '</div>';
        htmlContent += '</div>';
      }
      
      htmlContent += '</div>';
    }
    
    htmlContent += '</section>';
    
    // Section plongeurs non assign√©s
    if (plongeurs.length > 0) {
      htmlContent += '<section class="section">';
      htmlContent += '<div class="unassigned-section">';
      htmlContent += '<h3 class="unassigned-title">‚è≥ Plongeurs en Attente d\'Assignation (' + plongeurs.length + ')</h3>';
      htmlContent += '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px; margin-top: 20px;">';
      
      for (let i = 0; i < plongeurs.length; i++) {
        const p = plongeurs[i];
        const initiales = p.nom.split(' ').map(function(n) { return n.charAt(0); }).join('').substring(0, 2).toUpperCase();
        
        let niveauColor = '#6c757d';
        if (p.niveau === 'N1') niveauColor = '#17a2b8';
        else if (p.niveau === 'N2') niveauColor = '#28a745';
        else if (p.niveau === 'N3') niveauColor = '#ffc107';
        else if (p.niveau === 'N4/GP') niveauColor = '#fd7e14';
        else if (p.niveau === 'E1') niveauColor = '#6f42c1';
        else if (p.niveau === 'E2') niveauColor = '#e83e8c';
        else if (p.niveau === 'E3') niveauColor = '#dc3545';
        else if (p.niveau === 'E4') niveauColor = '#343a40';
        
        htmlContent += '<div class="plongeur-card">';
        htmlContent += '<div class="plongeur-avatar">' + initiales + '</div>';
        htmlContent += '<div class="plongeur-info">';
        htmlContent += '<div class="plongeur-nom">' + p.nom + '</div>';
        htmlContent += '<div class="plongeur-details">' + (p.pre || 'Aucune pr√©rogative sp√©cifi√©e') + '</div>';
        htmlContent += '</div>';
        htmlContent += '<div class="niveau-badge" style="background: ' + niveauColor + '">' + p.niveau + '</div>';
        htmlContent += '</div>';
      }
      
      htmlContent += '</div>';
      htmlContent += '</div>';
      htmlContent += '</section>';
    }
    
    htmlContent += '</main>';
    
    // Footer
    htmlContent += '<footer class="footer">';
    htmlContent += '<div class="footer-content">';
    htmlContent += '<div class="footer-section">';
    htmlContent += '<h4>üìã Informations L√©gales</h4>';
    htmlContent += '<p>Document officiel g√©n√©r√© par l\'application Palanqu√©es JSAS</p>';
    htmlContent += '<p>Conforme aux standards FFESSM</p>';
    htmlContent += '</div>';
    htmlContent += '<div class="footer-section">';
    htmlContent += '<h4>üîí S√©curit√©</h4>';
    htmlContent += '<p>V√©rification des pr√©rogatives obligatoire</p>';
    htmlContent += '<p>Respect des ratios d\'encadrement</p>';
    htmlContent += '</div>';
    htmlContent += '<div class="footer-section">';
    htmlContent += '<h4>üìû Contact</h4>';
    htmlContent += '<p>JSAS - Club associatif de Plong√©e</p>';
    htmlContent += '<p>En cas d\'urgence: contacter le DP</p>';
    htmlContent += '</div>';
    htmlContent += '<div class="footer-section">';
    htmlContent += '<h4>‚öôÔ∏è Technique</h4>';
    htmlContent += '<p>Version: 2.1.3 Professional</p>';
    htmlContent += '<p>Derni√®re mise √† jour: ' + new Date().toLocaleDateString('fr// Firebase configuration (m√©thode classique)
const firebaseConfig = {
  apiKey: "AIzaSyA9FO6BiHkm7dOQ3Z4-wpPQRgnsGKg3pmM",
  authDomain: "palanquees-jsas.firebaseapp.com",
  databaseURL: "https://palanquees-jsas-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "palanquees-jsas",
  storageBucket: "palanquees-jsas.firebasestorage.app",
  messagingSenderId: "284449736616",
  appId: "1:284449736616:web:a0949a9b669def06323f9d"
};

// Initialize Firebase
const app = firebase.initializeApp(firebaseConfig);
const db = firebase.database();

// ===== D√âCLARATIONS GLOBALES =====
let plongeurs = [];
let palanquees = [];
let plongeursOriginaux = []; // Pour le tri
let currentSort = 'none';
let firebaseConnected = false;
let pageLoadTime = Date.now();

// Structure am√©lior√©e pour les palanqu√©es avec les nouvelles donn√©es
let palanqueesData = [];

// DOM helpers
function $(id) {
  return document.getElementById(id);
}

// Fonction helper pour ajouter des event listeners de mani√®re s√©curis√©e
function addSafeEventListener(elementId, event, callback) {
  const element = $(elementId);
  if (element) {
    element.addEventListener(event, callback);
    return true;
  } else {
    console.warn(`‚ö†Ô∏è √âl√©ment '${elementId}' non trouv√© - event listener ignor√©`);
    return false;
  }
}

// Test de connexion Firebase
async function testFirebaseConnection() {
  try {
    const testRef = db.ref('.info/connected');
    testRef.on('value', (snapshot) => {
      firebaseConnected = snapshot.val() === true;
      console.log(firebaseConnected ? "‚úÖ Firebase connect√©" : "‚ùå Firebase d√©connect√©");
    });
    
    // Tentative d'√©criture test
    await db.ref('test').set({ timestamp: Date.now() });
    console.log("‚úÖ Test d'√©criture Firebase r√©ussi");
    return true;
  } catch (error) {
    console.error("‚ùå Test Firebase √©chou√©:", error.message);
    return false;
  }
}

// Chargement des donn√©es depuis Firebase
async function loadFromFirebase() {
  try {
    console.log("üì• Chargement des donn√©es depuis Firebase...");
    
    // Charger les plongeurs
    const plongeursSnapshot = await db.ref('plongeurs').once('value');
    if (plongeursSnapshot.exists()) {
      plongeurs = plongeursSnapshot.val() || [];
      console.log("‚úÖ Plongeurs charg√©s:", plongeurs.length);
    }
    
    // Charger les palanqu√©es avec les nouvelles donn√©es
    const palanqueesSnapshot = await db.ref('palanquees').once('value');
    if (palanqueesSnapshot.exists()) {
      palanquees = palanqueesSnapshot.val() || [];
      console.log("‚úÖ Palanqu√©es charg√©es:", palanquees.length);
    }
    
    // Charger les donn√©es des palanqu√©es (nouveaux champs)
    const palanqueesDataSnapshot = await db.ref('palanqueesData').once('value');
    if (palanqueesDataSnapshot.exists()) {
      palanqueesData = palanqueesDataSnapshot.val() || [];
      console.log("‚úÖ Donn√©es palanqu√©es charg√©es:", palanqueesData.length);
    } else {
      // Initialiser les donn√©es si elles n'existent pas
      palanqueesData = palanquees.map(() => ({
        heureDepart: '',
        profondeurPrevue: '',
        tempsPrevue: '',
        profondeurRealisee: '',
        tempsRealise: '',
        paliers: ''
      }));
    }
    
    plongeursOriginaux = [...plongeurs];
    
    // Rendu initial
    renderPalanquees();
    renderPlongeurs();
    updateAlertes();
    
  } catch (error) {
    console.error("‚ùå Erreur chargement Firebase:", error);
  }
}

// ===== FONCTIONS DE NETTOYAGE =====

// Charger la liste des sessions pour nettoyage - VERSION S√âCURIS√âE
async function populateSessionsCleanupList() {
  const container = $("sessions-cleanup-list");
  if (!container) {
    console.warn("‚ö†Ô∏è Conteneur sessions-cleanup-list non trouv√© - nettoyage sessions d√©sactiv√©");
    return;
  }

  try {
    console.log("üßπ Chargement liste sessions pour nettoyage...");
    const sessions = await loadAvailableSessions();
    
    if (sessions.length === 0) {
      container.innerHTML = '<em style="color: #666;">Aucune session √† nettoyer</em>';
      return;
    }
    
    container.innerHTML = '';
    
    sessions.forEach(session => {
      const item = document.createElement('label');
      item.className = 'cleanup-item';
      
      const plongeeType = session.plongee ? ` (${session.plongee})` : '';
      const dateFormatted = new Date(session.timestamp).toLocaleString('fr-FR');
      
      item.innerHTML = `
        <input type="checkbox" value="${session.key}" class="session-cleanup-checkbox">
        <div class="item-info">
          <span class="item-date">${session.date}${plongeeType}</span>
          <span class="item-details">${session.dp} - ${session.stats.nombrePalanquees} palanqu√©es</span>
          <span class="item-meta">Cr√©√© le ${dateFormatted}</span>
        </div>
      `;
      
      container.appendChild(item);
    });
    
    console.log("‚úÖ Liste sessions nettoyage mise √† jour:", sessions.length, "sessions");
    
  } catch (error) {
    console.error("‚ùå Erreur chargement liste sessions nettoyage:", error);
    if (container) {
      container.innerHTML = '<em style="color: #dc3545;">Erreur de chargement</em>';
    }
  }
}

// Charger la liste des DPs pour nettoyage - VERSION S√âCURIS√âE
async function populateDPCleanupList() {
  const container = $("dp-cleanup-list");
  if (!container) {
    console.warn("‚ö†Ô∏è Conteneur dp-cleanup-list non trouv√© - nettoyage DP d√©sactiv√©");
    return;
  }

  try {
    console.log("üßπ Chargement liste DP pour nettoyage...");
    const snapshot = await db.ref("dpInfo").once('value');
    
    if (!snapshot.exists()) {
      container.innerHTML = '<em style="color: #666;">Aucun DP √† nettoyer</em>';
      return;
    }
    
    const dpInfos = snapshot.val();
    container.innerHTML = '';
    
    // Trier par date d√©croissante
    const dpList = Object.entries(dpInfos).sort((a, b) => 
      new Date(b[1].date) - new Date(a[1].date)
    );
    
    dpList.forEach(([key, dpData]) => {
      const item = document.createElement('label');
      item.className = 'cleanup-item';
      
      const dateFormatted = new Date(dpData.timestamp).toLocaleString('fr-FR');
      const plongeeType = dpData.plongee ? ` (${dpData.plongee})` : '';
      
      item.innerHTML = `
        <input type="checkbox" value="${key}" class="dp-cleanup-checkbox">
        <div class="item-info">
          <span class="item-date">${dpData.date}${plongeeType}</span>
          <span class="item-details">${dpData.nom} - ${dpData.lieu}</span>
          <span class="item-meta">Cr√©√© le ${dateFormatted}</span>
        </div>
      `;
      
      container.appendChild(item);
    });
    
    console.log("‚úÖ Liste DP nettoyage mise √† jour:", dpList.length, "DP");
    
  } catch (error) {
    console.error("‚ùå Erreur chargement liste DP nettoyage:", error);
    if (container) {
      container.innerHTML = '<em style="color: #dc3545;">Erreur de chargement</em>';
    }
  }
}

// Supprimer les sessions s√©lectionn√©es
async function deleteSelectedSessions() {
  const checkboxes = document.querySelectorAll('.session-cleanup-checkbox:checked');
  
  if (checkboxes.length === 0) {
    alert("Aucune session s√©lectionn√©e pour suppression.");
    return;
  }
  
  const sessionKeys = Array.from(checkboxes).map(cb => cb.value);
  const confirmMessage = `√ätes-vous s√ªr de vouloir supprimer ${sessionKeys.length} session(s) ?\n\nCette action est irr√©versible !`;
  
  if (!confirm(confirmMessage)) {
    return;
  }
  
  try {
    console.log("üóëÔ∏è Suppression de", sessionKeys.length, "sessions...");
    
    for (const sessionKey of sessionKeys) {
      await db.ref(`sessions/${sessionKey}`).remove();
      console.log("‚úÖ Session supprim√©e:", sessionKey);
    }
    
    console.log("‚úÖ Suppression sessions termin√©e");
    alert(`${sessionKeys.length} session(s) supprim√©e(s) avec succ√®s !`);
    
    // Actualiser les listes
    await populateSessionsCleanupList();
    await populateSessionSelector();
    
  } catch (error) {
    console.error("‚ùå Erreur suppression sessions:", error);
    alert("Erreur lors de la suppression : " + error.message);
  }
}

// Supprimer les DPs s√©lectionn√©s
async function deleteSelectedDPs() {
  const checkboxes = document.querySelectorAll('.dp-cleanup-checkbox:checked');
  
  if (checkboxes.length === 0) {
    alert("Aucun DP s√©lectionn√© pour suppression.");
    return;
  }
  
  const dpKeys = Array.from(checkboxes).map(cb => cb.value);
  const confirmMessage = `√ätes-vous s√ªr de vouloir supprimer ${dpKeys.length} DP ?\n\nCette action est irr√©versible !`;
  
  if (!confirm(confirmMessage)) {
    return;
  }
  
  try {
    console.log("üóëÔ∏è Suppression de", dpKeys.length, "DP...");
    
    for (const dpKey of dpKeys) {
      await db.ref(`dpInfo/${dpKey}`).remove();
      console.log("‚úÖ DP supprim√©:", dpKey);
    }
    
    console.log("‚úÖ Suppression DP termin√©e");
    alert(`${dpKeys.length} DP supprim√©(s) avec succ√®s !`);
    
    // Actualiser les listes
    await populateDPCleanupList();
    chargerHistoriqueDP();
    
  } catch (error) {
    console.error("‚ùå Erreur suppression DP:", error);
    alert("Erreur lors de la suppression : " + error.message);
  }
}

// Fonctions de s√©lection - VERSION S√âCURIS√âE
function selectAllSessions(select = true) {
  const checkboxes = document.querySelectorAll('.session-cleanup-checkbox');
  if (checkboxes.length === 0) {
    console.warn("‚ö†Ô∏è Aucune checkbox session trouv√©e");
    return;
  }
  checkboxes.forEach(cb => cb.checked = select);
  updateCleanupSelection();
}

function selectAllDPs(select = true) {
  const checkboxes = document.querySelectorAll('.dp-cleanup-checkbox');
  if (checkboxes.length === 0) {
    console.warn("‚ö†Ô∏è Aucune checkbox DP trouv√©e");
    return;
  }
  checkboxes.forEach(cb => cb.checked = select);
  updateCleanupSelection();
}

// Mettre √† jour l'apparence des items s√©lectionn√©s
function updateCleanupSelection() {
  // Sessions
  document.querySelectorAll('.session-cleanup-checkbox').forEach(cb => {
    const item = cb.closest('.cleanup-item');
    if (cb.checked) {
      item.classList.add('selected');
    } else {
      item.classList.remove('selected');
    }
  });
  
  // DPs
  document.querySelectorAll('.dp-cleanup-checkbox').forEach(cb => {
    const item = cb.closest('.cleanup-item');
    if (cb.checked) {
      item.classList.add('selected');
    } else {
      item.classList.remove('selected');
    }
  });
}

// ===== DIAGNOSTIC SYST√àME =====
function diagnosticSystem() {
  console.log("üîç === DIAGNOSTIC SYST√àME ===");
  
  // Test 1: V√©rifier les √©l√©ments HTML
  const compteurPlongeurs = $("compteur-plongeurs");
  const compteurPalanquees = $("compteur-palanquees");
  
  console.log("üîç √âl√©ment compteur-plongeurs:", compteurPlongeurs ? "‚úÖ TROUV√â" : "‚ùå MANQUANT");
  console.log("üîç √âl√©ment compteur-palanquees:", compteurPalanquees ? "‚úÖ TROUV√â" : "‚ùå MANQUANT");
  
  // Test 2: V√©rifier les donn√©es
  console.log("üîç Nombre de plongeurs:", plongeurs.length);
  console.log("üîç Nombre de palanqu√©es:", palanquees.length);
  console.log("üîç D√©tail palanqu√©es:", palanquees.map(p => p.length));
  
  // Test 3: V√©rifier le DOM
  const titreListePlongeurs = document.querySelector("main strong");
  const titrePalanquees = document.querySelector("#palanquees strong");
  
  console.log("üîç Titre liste plongeurs:", titreListePlongeurs ? titreListePlongeurs.innerHTML : "NON TROUV√â");
  console.log("üîç Titre palanqu√©es:", titrePalanquees ? titrePalanquees.innerHTML : "NON TROUV√â");
  
  // Conclusion
  if (!compteurPlongeurs || !compteurPalanquees) {
    console.error("‚ùå PROBL√àME: Les √©l√©ments HTML pour les compteurs n'existent pas !");
    console.error("üîß SOLUTION: Tu dois mettre √† jour ton fichier index.html sur le serveur");
    alert("‚ùå PROBL√àME D√âTECT√â: Les √©l√©ments HTML pour les compteurs sont manquants !\n\nüîß SOLUTION: Mets √† jour ton fichier index.html sur le serveur avec la version qui contient les spans pour les compteurs.");
  } else {
    console.log("‚úÖ √âl√©ments HTML OK, probl√®me ailleurs");
  }
}

// ===== COMPTEURS D'AFFICHAGE =====
function updateCompteurs() {
  // Compteur plongeurs non assign√©s
  const compteurPlongeurs = $("compteur-plongeurs");
  if (compteurPlongeurs) {
    compteurPlongeurs.textContent = `(${plongeurs.length})`;
    compteurPlongeurs.style.color = plongeurs.length === 0 ? "#28a745" : "#007bff";
  }
  
  // Compteur plongeurs dans palanqu√©es
  const totalPlongeursEnPalanquees = palanquees.flat().length;
  const nombrePalanquees = palanquees.length;
  const compteurPalanquees = $("compteur-palanquees");
  
  if (compteurPalanquees) {
    if (nombrePalanquees === 0) {
      compteurPalanquees.textContent = "(Aucune palanqu√©e)";
      compteurPalanquees.style.color = "#666";
    } else {
      const plurielPlongeurs = totalPlongeursEnPalanquees > 1 ? "plongeurs" : "plongeur";
      const plurielPalanquees = nombrePalanquees > 1 ? "palanqu√©es" : "palanqu√©e";
      compteurPalanquees.textContent = `(${totalPlongeursEnPalanquees} ${plurielPlongeurs} dans ${nombrePalanquees} ${plurielPalanquees})`;
      compteurPalanquees.style.color = "#28a745";
    }
  }
  
  console.log(`üìä Compteurs mis √† jour: ${plongeurs.length} non assign√©s, ${totalPlongeursEnPalanquees} en palanqu√©es`);
}

// ===== SYST√àME D'ALERTES AM√âLIOR√â =====
function checkAllAlerts() {
  const alertes = [];
  
  palanquees.forEach((palanquee, idx) => {
    const n1s = palanquee.filter(p => p.niveau === "N1");
    const gps = palanquee.filter(p => ["N4/GP", "N4", "E2", "E3", "E4"].includes(p.niveau));
    const autonomes = palanquee.filter(p => ["N2", "N3"].includes(p.niveau));
    
    // Palanqu√©e > 5 plongeurs
    if (palanquee.length > 5) {
      alertes.push(`Palanqu√©e ${idx + 1}: Plus de 5 plongeurs (${palanquee.length})`);
    }
    
    // Palanqu√©e ‚â§ 1 plongeur
    if (palanquee.length <= 1) {
      alertes.push(`Palanqu√©e ${idx + 1}: Palanqu√©e de ${palanquee.length} plongeur(s)`);
    }
    
    // N1 sans GP
    if (n1s.length > 0 && gps.length === 0) {
      alertes.push(`Palanqu√©e ${idx + 1}: N1 sans Guide de Palanqu√©e`);
    }
    
    // Autonomes > 3
    if (autonomes.length > 3) {
      alertes.push(`Palanqu√©e ${idx + 1}: Plus de 3 plongeurs autonomes (${autonomes.length})`);
    }
    
    // 4 ou 5 plongeurs sans GP
    if ((palanquee.length === 4 || palanquee.length === 5) && gps.length === 0) {
      alertes.push(`Palanqu√©e ${idx + 1}: ${palanquee.length} plongeurs sans Guide de Palanqu√©e`);
    }
  });
  
  return alertes;
}

function updateAlertes() {
  const alertes = checkAllAlerts();
  const alerteSection = $("alertes-section");
  const alerteContent = $("alertes-content");
  
  if (alertes.length === 0) {
    alerteSection.classList.add("alert-hidden");
  } else {
    alerteSection.classList.remove("alert-hidden");
    alerteContent.innerHTML = alertes.map(alerte => 
      `<div class="alert-item">${alerte}</div>`
    ).join('');
  }
}

function checkAlert(palanquee) {
  const n1s = palanquee.filter(p => p.niveau === "N1");
  const gps = palanquee.filter(p => ["N4/GP", "N4", "E2", "E3", "E4"].includes(p.niveau));
  const autonomes = palanquee.filter(p => ["N2", "N3"].includes(p.niveau));
  
  return (
    palanquee.length > 5 ||
    palanquee.length <= 1 ||
    (n1s.length > 0 && gps.length === 0) ||
    autonomes.length > 3 ||
    ((palanquee.length === 4 || palanquee.length === 5) && gps.length === 0)
  );
}

// ===== TRI DES PLONGEURS =====
function sortPlongeurs(type) {
  currentSort = type;
  
  // Mettre √† jour les boutons
  document.querySelectorAll('.sort-btn').forEach(btn => {
    btn.classList.remove('active');
    if (btn.dataset.sort === type) {
      btn.classList.add('active');
    }
  });
  
  switch(type) {
    case 'nom':
      plongeurs.sort((a, b) => a.nom.localeCompare(b.nom));
      break;
    case 'niveau':
      const niveauOrder = { 'N1': 1, 'N2': 2, 'N3': 3, 'N4/GP': 4, 'E1': 5, 'E2': 6, 'E3': 7, 'E4': 8 };
      plongeurs.sort((a, b) => (niveauOrder[a.niveau] || 9) - (niveauOrder[b.niveau] || 9));
      break;
    case 'none':
    default:
      plongeurs = [...plongeursOriginaux];
      break;
  }
  
  renderPlongeurs();
}

// Sauvegarde Firebase avec historique par date/DP
async function syncToDatabase() {
  console.log("üíæ Synchronisation Firebase...");
  
  // Mettre √† jour la liste originale pour le tri
  plongeursOriginaux = [...plongeurs];
  
  // Rendu imm√©diat AVANT la sauvegarde Firebase
  renderPalanquees();
  renderPlongeurs();
  updateAlertes();
  
  // Sauvegarde Firebase en arri√®re-plan
  if (firebaseConnected) {
    try {
      // Sauvegarde globale (pour compatibilit√©)
      await Promise.all([
        db.ref('plongeurs').set(plongeurs),
        db.ref('palanquees').set(palanquees),
        db.ref('palanqueesData').set(palanqueesData)
      ]);
      
      // Sauvegarde par date/DP (NOUVEAU)
      await saveSessionData();
      
      console.log("‚úÖ Sauvegarde Firebase r√©ussie");
    } catch (error) {
      console.error("‚ùå Erreur sync Firebase:", error.message);
    }
  } else {
    console.warn("‚ö†Ô∏è Firebase non connect√©, donn√©es non sauvegard√©es");
  }
}

// NOUVELLE FONCTION : Sauvegarde par session (date + DP + plong√©e)
async function saveSessionData() {
  console.log("üíæ D√âBUT saveSessionData()");
  
  const dpNom = $("dp-nom").value.trim();
  const dpDate = $("dp-date").value;
  const dpPlongee = $("dp-plongee").value;
  
  console.log("üìù Donn√©es r√©cup√©r√©es:", { dpNom, dpDate, dpPlongee });
  
  if (!dpNom || !dpDate || !dpPlongee) {
    console.log("‚ùå Pas de sauvegarde session : DP, date ou plong√©e manquant");
    console.log("üîç D√©tail:", { 
      dpNom: dpNom || "MANQUANT", 
      dpDate: dpDate || "MANQUANT", 
      dpPlongee: dpPlongee || "MANQUANT" 
    });
    return;
  }
  
  // Cr√©er une cl√© unique : date + premi√®re partie du nom DP + type de plong√©e
  const dpKey = dpNom.split(' ')[0].substring(0, 8); // Premier mot, max 8 char
  const sessionKey = `${dpDate}_${dpKey}_${dpPlongee}`;
  
  console.log("üîë Cl√© de session g√©n√©r√©e:", sessionKey);
  
  const sessionData = {
    meta: {
      dp: dpNom,
      date: dpDate,
      lieu: $("dp-lieu").value.trim() || "Non d√©fini",
      plongee: dpPlongee,
      timestamp: Date.now(),
      sessionKey: sessionKey
    },
    plongeurs: plongeurs,
    palanquees: palanquees,
    palanqueesData: palanqueesData, // Ajout des nouvelles donn√©es
    stats: {
      totalPlongeurs: plongeurs.length + palanquees.flat().length,
      nombrePalanquees: palanquees.length,
      plongeursNonAssignes: plongeurs.length,
      alertes: checkAllAlerts()
    }
  };
  
  console.log("üìä Donn√©es de session √† sauvegarder:", sessionData);
  console.log("üéØ Chemin Firebase:", `sessions/${sessionKey}`);
  
  try {
    console.log("üî• Tentative de sauvegarde Firebase...");
    await db.ref(`sessions/${sessionKey}`).set(sessionData);
    console.log("‚úÖ Session sauvegard√©e avec succ√®s:", sessionKey);
    
    // V√©rification imm√©diate
    console.log("üîç V√©rification de la sauvegarde...");
    const verification = await db.ref(`sessions/${sessionKey}`).once('value');
    if (verification.exists()) {
      console.log("‚úÖ V√©rification OK - Session bien sauvegard√©e");
    } else {
      console.error("‚ùå V√©rification √©chou√©e - Session non trouv√©e apr√®s sauvegarde");
    }
    
  } catch (error) {
    console.error("‚ùå Erreur sauvegarde session:", error);
    console.error("üîç D√©tails erreur:", error.message);
  }
}

// NOUVELLE FONCTION : Charger les sessions disponibles - VERSION CORRIG√âE
async function loadAvailableSessions() {
  try {
    const sessionsSnapshot = await db.ref('sessions').once('value');
    if (!sessionsSnapshot.exists()) {
      console.log("‚ÑπÔ∏è Aucune session trouv√©e");
      return [];
    }
    
    const sessions = sessionsSnapshot.val();
    const sessionsList = [];
    
    for (const [key, data] of Object.entries(sessions)) {
      // CORRECTION: V√©rifier si data.meta existe avant de l'utiliser
      if (!data || typeof data !== 'object') {
        console.warn(`‚ö†Ô∏è Session ${key} invalide (donn√©es corrompues), ignor√©e`);
        continue;
      }
      
      // Gestion des anciens formats de sessions
      let sessionInfo;
      
      if (data.meta) {
        // Nouveau format avec meta
        sessionInfo = {
          key: key,
          dp: data.meta.dp || "DP non d√©fini",
          date: data.meta.date || "Date inconnue",
          lieu: data.meta.lieu || "Lieu non d√©fini",
          plongee: data.meta.plongee || "Non d√©fini",
          timestamp: data.meta.timestamp || Date.now(),
          stats: data.stats || {
            nombrePalanquees: data.palanquees ? data.palanquees.length : 0,
            totalPlongeurs: (data.plongeurs || []).length + (data.palanquees || []).flat().length,
            plongeursNonAssignes: (data.plongeurs || []).length
          }
        };
      } else {
        // Ancien format ou format non standard
        console.warn(`‚ö†Ô∏è Session ${key} utilise un ancien format, adaptation...`);
        
        // Essayer d'extraire les infos du nom de la cl√©
        const keyParts = key.split('_');
        const dateFromKey = keyParts[0] || "Date inconnue";
        const plongeeFromKey = keyParts[keyParts.length - 1] || "Non d√©fini";
        
        sessionInfo = {
          key: key,
          dp: data.dp || data.directeurPlongee || "DP non d√©fini (ancien format)",
          date: data.date || dateFromKey,
          lieu: data.lieu || "Lieu non d√©fini",
          plongee: data.plongee || plongeeFromKey,
          timestamp: data.timestamp || Date.now(),
          stats: {
            nombrePalanquees: data.palanquees ? data.palanquees.length : 0,
            totalPlongeurs: (data.plongeurs || []).length + (data.palanquees || []).flat().length,
            plongeursNonAssignes: (data.plongeurs || []).length
          }
        };
      }
      
      sessionsList.push(sessionInfo);
    }
    
    // Trier par date d√©croissante
    sessionsList.sort((a, b) => {
      // Essayer de comparer par date, sinon par timestamp
      const dateA = new Date(a.date);
      const dateB = new Date(b.date);
      
      if (!isNaN(dateA.getTime()) && !isNaN(dateB.getTime())) {
        return dateB - dateA;
      } else {
        // Fallback sur timestamp
        return (b.timestamp || 0) - (a.timestamp || 0);
      }
    });
    
    console.log("‚úÖ Sessions charg√©es:", sessionsList.length);
    return sessionsList;
    
  } catch (error) {
    console.error("‚ùå Erreur chargement sessions:", error);
    return [];
  }
}

// NOUVELLE FONCTION : Charger une session sp√©cifique
async function loadSession(sessionKey) {
  try {
    console.log("üîÑ Chargement de la session:", sessionKey);
    
    const sessionSnapshot = await db.ref(`sessions/${sessionKey}`).once('value');
    if (!sessionSnapshot.exists()) {
      console.error("‚ùå Session non trouv√©e:", sessionKey);
      alert("Session non trouv√©e dans Firebase");
      return false;
    }
    
    const sessionData = sessionSnapshot.val();
    console.log("üìä Donn√©es session r√©cup√©r√©es:", sessionData);
    
    // Charger les donn√©es
    plongeurs = sessionData.plongeurs || [];
    palanquees = sessionData.palanquees || [];
    palanqueesData = sessionData.palanqueesData || palanquees.map(() => ({
      heureDepart: '',
      profondeurPrevue: '',
      tempsPrevue: '',
      profondeurRealisee: '',
      tempsRealise: '',
      paliers: ''
    }));
    plongeursOriginaux = [...plongeurs];
    
    console.log("‚úÖ Donn√©es charg√©es:", plongeurs.length, "plongeurs,", palanquees.length, "palanqu√©es");
    
    // Mettre √† jour les champs DP
    $("dp-nom").value = sessionData.meta.dp || "";
    $("dp-date").value = sessionData.meta.date || "";
    $("dp-lieu").value = sessionData.meta.lieu || "";
    $("dp-plongee").value = sessionData.meta.plongee || "matin";
    
    // FORCER le rendu
    console.log("üé® For√ßage du rendu...");
    renderPalanquees();
    renderPlongeurs();
    updateAlertes();
    
    console.log("‚úÖ Session charg√©e:", sessionKey);
    console.log(`üìä ${plongeurs.length} plongeurs et ${palanquees.length} palanqu√©es affich√©s`);
    
    // Message utilisateur
    const dpMessage = $("dp-message");
    dpMessage.innerHTML = `‚úì Session "${sessionData.meta.dp}" du ${sessionData.meta.date} (${sessionData.meta.plongee || 'matin'}) charg√©e`;
    dpMessage.style.color = "green";
    
    return true;
    
  } catch (error) {
    console.error("‚ùå Erreur chargement session:", error);
    alert("Erreur lors du chargement de la session : " + error.message);
    return false;
  }
}

// NOUVELLE FONCTION : Populer le s√©lecteur de sessions  
async function populateSessionSelector() {
  try {
    console.log("üîÑ Chargement des sessions disponibles...");
    const sessions = await loadAvailableSessions();
    const selector = $("session-selector");
    
    if (!selector) {
      console.error("‚ùå S√©lecteur de sessions non trouv√©");
      return;
    }
    
    // Vider le s√©lecteur
    selector.innerHTML = '<option value="">-- Charger une session --</option>';
    
    if (sessions.length === 0) {
      const option = document.createElement("option");
      option.textContent = "Aucune session disponible";
      option.disabled = true;
      selector.appendChild(option);
      console.log("‚ÑπÔ∏è Aucune session disponible");
      return;
    }
    
    sessions.forEach(session => {
      const option = document.createElement("option");
      option.value = session.key;
      
      // Format d'affichage am√©lior√© avec type de plong√©e
      const plongeeType = session.plongee ? ` (${session.plongee})` : '';
      option.textContent = `${session.date}${plongeeType} - ${session.dp} - ${session.stats.nombrePalanquees} palanqu√©es`;
      
      selector.appendChild(option);
    });
    
    console.log("‚úÖ S√©lecteur de sessions mis √† jour:", sessions.length, "sessions");
  } catch (error) {
    console.error("‚ùå Erreur lors du peuplement du s√©lecteur:", error);
  }
}

// ===== EXPORT JSON AM√âLIOR√â =====
function exportToJSON() {
  const dpNom = $("dp-nom").value || "Non d√©fini";
  const dpDate = $("dp-date").value || "Non d√©finie";
  const dpLieu = $("dp-lieu").value || "Non d√©fini";
  const dpPlongee = $("dp-plongee").value || "matin";
  
  const exportData = {
    meta: {
      dp: dpNom,
      date: dpDate,
      lieu: dpLieu,
      plongee: dpPlongee,
      version: "2.0.0",
      exportDate: new Date().toISOString()
    },
    plongeurs: plongeurs.map(p => ({
      nom: p.nom,
      niveau: p.niveau,
      prerogatives: p.pre || ""
    })),
    palanquees: palanquees.map((pal, idx) => ({
      numero: idx + 1,
      plongeurs: pal.map(p => ({
        nom: p.nom,
        niveau: p.niveau,
        prerogatives: p.pre || ""
      })),
      donnees: palanqueesData[idx] || {},
      alertes: checkAlert(pal) ? checkAllAlerts().filter(a => a.includes(`Palanqu√©e ${idx + 1}`)) : []
    })),
    resume: {
      totalPlongeurs: plongeurs.length + palanquees.flat().length,
      nombrePalanquees: palanquees.length,
      plongeursNonAssignes: plongeurs.length,
      alertesTotal: checkAllAlerts().length
    }
  };
  
  const dataStr = JSON.stringify(exportData, null, 2);
  const blob = new Blob([dataStr], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `palanquees-${dpDate || 'export'}-${dpPlongee}.json`;
  a.click();
  URL.revokeObjectURL(url);
  
  console.log("üì§ Export JSON am√©lior√© effectu√©");
}

// Render functions
function renderPlongeurs() {
  const liste = $("listePlongeurs");
  if (!liste) return;
  
  liste.innerHTML = "";
  
  if (plongeurs.length === 0) {
    liste.innerHTML = '<li style="text-align: center; color: #666; font-style: italic; padding: 20px;">Aucun plongeur ajout√©</li>';
  } else {
    plongeurs.forEach((p, i) => {
      const li = document.createElement("li");
      li.className = "plongeur-item";
      li.draggable = true;
      li.dataset.index = i;
      
      li.innerHTML = `
        <div class="plongeur-content">
          <span class="plongeur-nom">${p.nom}</span>
          <span class="plongeur-niveau">${p.niveau}</span>
          <span class="plongeur-prerogatives">[${p.pre || 'Aucune'}]</span>
          <span class="delete-plongeur" title="Supprimer ce plongeur">‚ùå</span>
        </div>
      `;
      
      // Event listeners pour drag & drop - VERSION CORRIG√âE FIREBASE
      li.addEventListener("dragstart", e => {
        console.log("üñ±Ô∏è D√©but drag plongeur:", p.nom, "index:", i);
        li.classList.add('dragging');
        
        // IMPORTANT: Stocker les donn√©es du plongeur directement, pas l'index
        const plongeurData = {
          type: "fromMainList",
          plongeur: { ...p }, // Clone de l'objet
          originalIndex: i
        };
        
        e.dataTransfer.setData("text/plain", JSON.stringify(plongeurData));
        e.dataTransfer.effectAllowed = "move";
      });
      
      li.addEventListener("dragend", e => {
        li.classList.remove('dragging');
        console.log("üñ±Ô∏è Fin drag plongeur");
      });
      
      li.querySelector(".delete-plongeur").addEventListener("click", (e) => {
        e.stopPropagation();
        if (confirm(`Supprimer ${p.nom} de la liste ?`)) {
          plongeurs.splice(i, 1);
          // Mettre √† jour la liste originale
          plongeursOriginaux = plongeursOriginaux.filter(po => po.nom !== p.nom);
          syncToDatabase();
        }
      });
      
      liste.appendChild(li);
    });
  }
  
  // Mise √† jour des compteurs apr√®s rendu
  updateCompteurs();
}

function renderPalanquees() {
  const container = $("palanqueesContainer");
  if (!container) return;
  
  container.innerHTML = "";
  
  if (palanquees.length === 0) return;
  
  // S'assurer que palanqueesData a la bonne taille
  while (palanqueesData.length < palanquees.length) {
    palanqueesData.push({
      heureDepart: '',
      profondeurPrevue: '',
      tempsPrevue: '',
      profondeurRealisee: '',
      tempsRealise: '',
      paliers: ''
    });
  }
  
  palanquees.forEach((palanquee, idx) => {
    const div = document.createElement("div");
    div.className = "palanquee";
    div.dataset.index = idx;
    div.dataset.alert = checkAlert(palanquee) ? "true" : "false";
    
    // R√©cup√©rer les donn√©es de la palanqu√©e
    const palData = palanqueesData[idx] || {
      heureDepart: '',
      profondeurPrevue: '',
      tempsPrevue: '',
      profondeurRealisee: '',
      tempsRealise: '',
      paliers: ''
    };
    
    div.innerHTML = `
      <div class="palanquee-title">
        <span>Palanqu√©e ${idx + 1} (${palanquee.length} plongeur${palanquee.length > 1 ? 's' : ''})</span>
        <span class="remove-palanquee" style="color: red; cursor: pointer;">‚ùå</span>
      </div>
      
      <div class="palanquee-info-section">
        <div class="palanquee-info-grid">
          <div class="info-item">
            <label>Heure d√©part:</label>
            <input type="time" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="heureDepart" 
                   value="${palData.heureDepart || ''}" 
                   placeholder="HH:MM">
          </div>
          <div class="info-item">
            <label>Prof. pr√©vue:</label>
            <input type="text" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="profondeurPrevue" 
                   value="${palData.profondeurPrevue || ''}" 
                   placeholder="20m">
          </div>
          <div class="info-item">
            <label>Temps pr√©vu:</label>
            <input type="text" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="tempsPrevue" 
                   value="${palData.tempsPrevue || ''}" 
                   placeholder="45min">
          </div>
          <div class="info-item">
            <label>Prof. r√©alis√©e:</label>
            <input type="text" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="profondeurRealisee" 
                   value="${palData.profondeurRealisee || ''}" 
                   placeholder="18m">
          </div>
          <div class="info-item">
            <label>Temps r√©alis√©:</label>
            <input type="text" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="tempsRealise" 
                   value="${palData.tempsRealise || ''}" 
                   placeholder="40min">
          </div>
          <div class="info-item">
            <label>Paliers:</label>
            <input type="text" class="palanquee-info-input" 
                   data-palanquee="${idx}" 
                   data-field="paliers" 
                   value="${palData.paliers || ''}" 
                   placeholder="3min √† 3m">
          </div>
        </div>
      </div>
    `;
    
    if (palanquee.length === 0) {
      const emptyMsg = document.createElement("div");
      emptyMsg.className = "palanquee-empty";
      emptyMsg.textContent = "Glissez des plongeurs ici ‚¨áÔ∏è";
      div.appendChild(emptyMsg);
    } else {
      const plongeursList = document.createElement("ul");
      plongeursList.className = "palanquee-plongeurs-list";
      
      palanquee.forEach((plg, plongeurIndex) => {
        const li = document.createElement("li");
        li.className = "plongeur-item palanquee-plongeur-item";
        li.draggable = true;
        
        li.innerHTML = `
          <div class="plongeur-content">
            <span class="plongeur-nom">${plg.nom}</span>
            <span class="plongeur-niveau">${plg.niveau}</span>
            <input type="text" class="plongeur-prerogatives-editable" 
                   value="${plg.pre || ''}" 
                   placeholder="PE20, PA40..."
                   data-palanquee-idx="${idx}"
                   data-plongeur-idx="${plongeurIndex}"
                   title="Cliquez pour modifier les pr√©rogatives">
            <span class="return-plongeur" 
                  data-palanquee-idx="${idx}"
                  data-plongeur-idx="${plongeurIndex}"
                  title="Remettre dans la liste">‚¨ÖÔ∏è</span>
          </div>
        `;
        
        // Event listener pour drag & drop - VERSION CORRIG√âE
        li.addEventListener("dragstart", e => {
          console.log("üñ±Ô∏è D√©but drag depuis palanqu√©e", idx + 1, "plongeur", plongeurIndex, ":", plg.nom);
          li.classList.add('dragging');
          e.dataTransfer.setData("text/plain", JSON.stringify({
            type: "fromPalanquee",
            palanqueeIndex: idx,
            plongeurIndex: plongeurIndex,
            plongeur: plg
          }));
          e.dataTransfer.effectAllowed = "move";
        });
        
        li.addEventListener("dragend", e => {
          li.classList.remove('dragging');
          console.log("üñ±Ô∏è Fin drag depuis palanqu√©e");
        });
        
        plongeursList.appendChild(li);
      });
      
      div.appendChild(plongeursList);
    }

    // Event listeners
    div.querySelector(".remove-palanquee").addEventListener("click", () => {
      if (confirm(`Supprimer la palanqu√©e ${idx + 1} ?`)) {
        palanquee.forEach(plg => {
          plongeurs.push(plg);
          plongeursOriginaux.push(plg);
        });
        palanquees.splice(idx, 1);
        palanqueesData.splice(idx, 1);
        syncToDatabase();
      }
    });

    div.addEventListener("drop", e => {
      e.preventDefault();
      div.classList.remove('drag-over');
      
      const data = e.dataTransfer.getData("text/plain");
      console.log("üéØ Drop dans palanqu√©e", idx + 1, "data re√ßue:", data);
      
      try {
        const dragData = JSON.parse(data);
        console.log("üìù Donn√©es pars√©es:", dragData);
        
        if (dragData.type === "fromPalanquee") {
          console.log("üîÑ D√©placement entre palanqu√©es d√©tect√©");
          if (dragData.palanqueeIndex !== undefined && 
              dragData.plongeurIndex !== undefined && 
              palanquees[dragData.palanqueeIndex] &&
              palanquees[dragData.palanqueeIndex][dragData.plongeurIndex]) {
            
            const sourcePalanquee = palanquees[dragData.palanqueeIndex];
            const plongeur = sourcePalanquee.splice(dragData.plongeurIndex, 1)[0];
            palanquee.push(plongeur);
            console.log("‚úÖ Plongeur d√©plac√© entre palanqu√©es:", plongeur.nom);
            syncToDatabase();
          }
          return;
        }
        
        if (dragData.type === "fromMainList") {
          console.log("üìù D√©placement depuis liste principale d√©tect√©");
          // Utiliser les donn√©es du plongeur directement
          const plongeurToMove = dragData.plongeur;
          
          // Trouver et supprimer le plongeur de la liste principale
          const indexToRemove = plongeurs.findIndex(p => 
            p.nom === plongeurToMove.nom && p.niveau === plongeurToMove.niveau
          );
          
          if (indexToRemove !== -1) {
            plongeurs.splice(indexToRemove, 1);
            palanquee.push(plongeurToMove);
            console.log("‚úÖ Plongeur ajout√© depuis liste principale:", plongeurToMove.nom);
            syncToDatabase();
          } else {
            console.error("‚ùå Plongeur non trouv√© dans la liste principale");
          }
          return;
        }
        
      } catch (error) {
        console.error("‚ùå Erreur parsing donn√©es drag:", error);
      }
    });

    // Drag & drop am√©lior√©
    div.addEventListener("dragover", e => {
      e.preventDefault();
      e.dataTransfer.dropEffect = "move";
      div.classList.add('drag-over');
      console.log("üéØ Survol palanqu√©e", idx + 1);
    });
    
    div.addEventListener("dragleave", e => {
      if (!div.contains(e.relatedTarget)) {
        div.classList.remove('drag-over');
        console.log("üéØ Sortie palanqu√©e", idx + 1);
      }
    });

    container.appendChild(div);
  });
  
  setupPalanqueesEventListeners();
  
  // Mise √† jour des compteurs apr√®s rendu des palanqu√©es
  updateCompteurs();
}

function setupPalanqueesEventListeners() {
  // Event delegation pour les boutons de retour
  document.addEventListener("click", (e) => {
    if (e.target.classList.contains("return-plongeur")) {
      const palanqueeIdx = parseInt(e.target.dataset.palanqueeIdx);
      const plongeurIdx = parseInt(e.target.dataset.plongeurIdx);
      
      if (palanquees[palanqueeIdx] && palanquees[palanqueeIdx][plongeurIdx]) {
        const plongeur = palanquees[palanqueeIdx].splice(plongeurIdx, 1)[0];
        plongeurs.push(plongeur);
        plongeursOriginaux.push(plongeur);
        syncToDatabase();
      }
    }
  });
  
  // Event delegation pour la modification des pr√©rogatives
  document.addEventListener("change", (e) => {
    if (e.target.classList.contains("plongeur-prerogatives-editable")) {
      const palanqueeIdx = parseInt(e.target.dataset.palanqueeIdx);
      const plongeurIdx = parseInt(e.target.dataset.plongeurIdx);
      const newPrerogatives = e.target.value.trim();
      
      if (palanquees[palanqueeIdx] && palanquees[palanqueeIdx][plongeurIdx]) {
        palanquees[palanqueeIdx][plongeurIdx].pre = newPrerogatives;
        syncToDatabase();
      }
    }
    
    // G√©rer les changements dans les champs d'info palanqu√©e
    if (e.target.classList.contains("palanquee-info-input")) {
      const palanqueeIdx = parseInt(e.target.dataset.palanquee);
      const field = e.target.dataset.field;
      const value = e.target.value.trim();
      
      if (!palanqueesData[palanqueeIdx]) {
        palanqueesData[palanqueeIdx] = {
          heureDepart: '',
          profondeurPrevue: '',
          tempsPrevue: '',
          profondeurRealisee: '',
          tempsRealise: '',
          paliers: ''
        };
      }
      
      palanqueesData[palanqueeIdx][field] = value;
      syncToDatabase();
      console.log(`‚úÖ Mise √† jour palanqu√©e ${palanqueeIdx + 1} - ${field}: ${value}`);
    }
  });
  
  // Emp√™cher le drag & drop sur les champs input
  document.addEventListener("mousedown", (e) => {
    if (e.target.classList.contains("plongeur-prerogatives-editable") || 
        e.target.classList.contains("palanquee-info-input")) {
      e.stopPropagation();
    }
  });
}
